<?php namespace Illuminate\Console; use Symfony\Component\Console\Input\ArrayInput; use Symfony\Component\Console\Output\NullOutput; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Command\Command as SymfonyCommand; class Application extends \Symfony\Component\Console\Application { protected $exceptionHandler; protected $laravel; public static function start($app) { return static::make($app)->boot(); } public static function make($app) { $app->boot(); $console = with($console = new static('Laravel Framework', $app::VERSION)) ->setLaravel($app) ->setExceptionHandler($app['exception']) ->setAutoExit(false); $app->instance('artisan', $console); return $console; } public function boot() { require $this->laravel['path'].'/start/artisan.php'; if (isset($this->laravel['events'])) { $this->laravel['events'] ->fire('artisan.start', array($this)); } return $this; } public function call($command, array $parameters = array(), OutputInterface $output = null) { $parameters['command'] = $command; $output = $output ?: new NullOutput; $input = new ArrayInput($parameters); return $this->find($command)->run($input, $output); } public function add(SymfonyCommand $command) { if ($command instanceof Command) { $command->setLaravel($this->laravel); } return $this->addToParent($command); } protected function addToParent(SymfonyCommand $command) { return parent::add($command); } public function resolve($command) { return $this->add($this->laravel[$command]); } public function resolveCommands($commands) { $commands = is_array($commands) ? $commands : func_get_args(); foreach ($commands as $command) { $this->resolve($command); } } protected function getDefaultInputDefinition() { $definition = parent::getDefaultInputDefinition(); $definition->addOption($this->getEnvironmentOption()); return $definition; } protected function getEnvironmentOption() { $message = 'The environment the command should run under.'; return new InputOption('--env', null, InputOption::VALUE_OPTIONAL, $message); } public function renderException($e, $output) { if (isset($this->exceptionHandler)) { $this->exceptionHandler->handleConsole($e); } parent::renderException($e, $output); } public function setExceptionHandler($handler) { $this->exceptionHandler = $handler; return $this; } public function setLaravel($laravel) { $this->laravel = $laravel; return $this; } public function setAutoExit($boolean) { parent::setAutoExit($boolean); return $this; } }
