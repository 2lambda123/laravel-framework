<?php namespace Illuminate\Foundation\Testing; use Illuminate\View\View; use Illuminate\Auth\UserInterface; abstract class TestCase extends \PHPUnit_Framework_TestCase { protected $app; protected $client; public function setUp() { if ( ! $this->app) { $this->refreshApplication(); } } protected function refreshApplication() { $this->app = $this->createApplication(); $this->client = $this->createClient(); $this->app->setRequestForConsoleEnvironment(); $this->app->boot(); } abstract public function createApplication(); public function call() { call_user_func_array(array($this->client, 'request'), func_get_args()); return $this->client->getResponse(); } public function callSecure() { $parameters = func_get_args(); $parameters[1] = 'https://localhost/'.ltrim($parameters[1], '/'); return call_user_func_array(array($this, 'call'), $parameters); } public function action($method, $action, $wildcards = array(), $parameters = array(), $files = array(), $server = array(), $content = null, $changeHistory = true) { $uri = $this->app['url']->action($action, $wildcards, true); return $this->call($method, $uri, $parameters, $files, $server, $content, $changeHistory); } public function route($method, $name, $routeParameters = array(), $parameters = array(), $files = array(), $server = array(), $content = null, $changeHistory = true) { $uri = $this->app['url']->route($name, $routeParameters); return $this->call($method, $uri, $parameters, $files, $server, $content, $changeHistory); } public function assertResponseOk() { $response = $this->client->getResponse(); $actual = $response->getStatusCode(); return $this->assertTrue($response->isOk(), 'Expected status code 200, got ' .$actual); } public function assertResponseStatus($code) { return $this->assertEquals($code, $this->client->getResponse()->getStatusCode()); } public function assertViewHas($key, $value = null) { if (is_array($key)) return $this->assertViewHasAll($key); $response = $this->client->getResponse()->original; if ( ! $response instanceof View) { return $this->assertTrue(false, 'The response was not a view.'); } if (is_null($value)) { $this->assertArrayHasKey($key, $response->getData()); } else { $this->assertEquals($value, $response->$key); } } public function assertViewHasAll(array $bindings) { foreach ($bindings as $key => $value) { if (is_int($key)) { $this->assertViewHas($value); } else { $this->assertViewHas($key, $value); } } } public function assertViewMissing($key) { $response = $this->client->getResponse()->original; if ( ! $response instanceof View) { return $this->assertTrue(false, 'The response was not a view.'); } $this->assertArrayNotHasKey($key, $response->getData()); } public function assertRedirectedTo($uri, $with = array()) { $response = $this->client->getResponse(); $this->assertInstanceOf('Illuminate\Http\RedirectResponse', $response); $this->assertEquals($this->app['url']->to($uri), $response->headers->get('Location')); $this->assertSessionHasAll($with); } public function assertRedirectedToRoute($name, $parameters = array(), $with = array()) { $this->assertRedirectedTo($this->app['url']->route($name, $parameters), $with); } public function assertRedirectedToAction($name, $parameters = array(), $with = array()) { $this->assertRedirectedTo($this->app['url']->action($name, $parameters), $with); } public function assertSessionHas($key, $value = null) { if (is_array($key)) return $this->assertSessionHasAll($key); if (is_null($value)) { $this->assertTrue($this->app['session.store']->has($key), "Session missing key: $key"); } else { $this->assertEquals($value, $this->app['session.store']->get($key)); } } public function assertSessionHasAll(array $bindings) { foreach ($bindings as $key => $value) { if (is_int($key)) { $this->assertSessionHas($value); } else { $this->assertSessionHas($key, $value); } } } public function assertSessionHasErrors($bindings = array(), $format = null) { $this->assertSessionHas('errors'); $bindings = (array) $bindings; $errors = $this->app['session.store']->get('errors'); foreach ($bindings as $key => $value) { if (is_int($key)) { $this->assertTrue($errors->has($value), "Session missing error: $value"); } else { $this->assertContains($value, $errors->get($key, $format)); } } } public function assertHasOldInput() { $this->assertSessionHas('_old_input'); } public function session(array $data) { $this->startSession(); foreach ($data as $key => $value) { $this->app['session']->put($key, $value); } } public function flushSession() { $this->startSession(); $this->app['session']->flush(); } protected function startSession() { if ( ! $this->app['session']->isStarted()) { $this->app['session']->start(); } } public function be(UserInterface $user, $driver = null) { $this->app['auth']->driver($driver)->setUser($user); } public function seed($class = 'DatabaseSeeder') { $this->app['artisan']->call('db:seed', array('--class' => $class)); } protected function createClient(array $server = array()) { return new Client($this->app, $server); } }
