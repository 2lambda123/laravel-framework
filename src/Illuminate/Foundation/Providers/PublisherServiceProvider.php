<?php namespace Illuminate\Foundation\Providers; use Illuminate\Support\ServiceProvider; use Illuminate\Foundation\ViewPublisher; use Illuminate\Foundation\AssetPublisher; use Illuminate\Foundation\ConfigPublisher; use Illuminate\Foundation\MigrationPublisher; use Illuminate\Foundation\Console\ViewPublishCommand; use Illuminate\Foundation\Console\AssetPublishCommand; use Illuminate\Foundation\Console\ConfigPublishCommand; use Illuminate\Foundation\Console\MigratePublishCommand; class PublisherServiceProvider extends ServiceProvider { protected $defer = true; public function register() { $this->registerAssetPublisher(); $this->registerConfigPublisher(); $this->registerViewPublisher(); $this->registerMigrationPublisher(); $this->commands( 'command.asset.publish', 'command.config.publish', 'command.view.publish', 'command.migrate.publish' ); } protected function registerAssetPublisher() { $this->registerAssetPublishCommand(); $this->app->bindShared('asset.publisher', function($app) { $publicPath = $app['path.public']; $publisher = new AssetPublisher($app['files'], $publicPath); $publisher->setPackagePath($app['path.base'].'/vendor'); return $publisher; }); } protected function registerAssetPublishCommand() { $this->app->bindShared('command.asset.publish', function($app) { return new AssetPublishCommand($app['asset.publisher']); }); } protected function registerConfigPublisher() { $this->registerConfigPublishCommand(); $this->app->bindShared('config.publisher', function($app) { $path = $app['path'].'/config'; $publisher = new ConfigPublisher($app['files'], $path); $publisher->setPackagePath($app['path.base'].'/vendor'); return $publisher; }); } protected function registerConfigPublishCommand() { $this->app->bindShared('command.config.publish', function($app) { return new ConfigPublishCommand($app['config.publisher']); }); } protected function registerViewPublisher() { $this->registerViewPublishCommand(); $this->app->bindShared('view.publisher', function($app) { $viewPath = $app['path'].'/views'; $publisher = new ViewPublisher($app['files'], $viewPath); $publisher->setPackagePath($app['path.base'].'/vendor'); return $publisher; }); } protected function registerViewPublishCommand() { $this->app->bindShared('command.view.publish', function($app) { return new ViewPublishCommand($app['view.publisher']); }); } protected function registerMigrationPublisher() { $this->registerMigratePublishCommand(); $this->app->bindShared('migration.publisher', function($app) { return new MigrationPublisher($app['files']); }); } protected function registerMigratePublishCommand() { $this->app->bindShared('command.migrate.publish', function($app) { return new MigratePublishCommand; }); } public function provides() { return array( 'asset.publisher', 'command.asset.publish', 'config.publisher', 'command.config.publish', 'view.publisher', 'command.view.publish', 'migration.publisher', 'command.migrate.publish', ); } }
