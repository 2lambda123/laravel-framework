<?php namespace Illuminate\Foundation; use Illuminate\Filesystem\Filesystem; class ProviderRepository { protected $files; protected $manifestPath; protected $default = array('when' => array()); public function __construct(Filesystem $files, $manifestPath) { $this->files = $files; $this->manifestPath = $manifestPath; } public function load(Application $app, array $providers) { $manifest = $this->loadManifest(); if ($this->shouldRecompile($manifest, $providers)) { $manifest = $this->compileManifest($app, $providers); } if ($app->runningInConsole()) { $manifest['eager'] = $manifest['providers']; } foreach ($manifest['when'] as $provider => $events) { $this->registerLoadEvents($app, $provider, $events); } foreach ($manifest['eager'] as $provider) { $app->register($this->createProvider($app, $provider)); } $app->setDeferredServices($manifest['deferred']); } protected function registerLoadEvents(Application $app, $provider, array $events) { if (count($events) < 1) return; $app->make('events')->listen($events, function() use ($app, $provider) { $app->register($provider); }); } protected function compileManifest(Application $app, $providers) { $manifest = $this->freshManifest($providers); foreach ($providers as $provider) { $instance = $this->createProvider($app, $provider); if ($instance->isDeferred()) { foreach ($instance->provides() as $service) { $manifest['deferred'][$service] = $provider; } $manifest['when'][$provider] = $instance->when(); } else { $manifest['eager'][] = $provider; } } return $this->writeManifest($manifest); } public function createProvider(Application $app, $provider) { return new $provider($app); } public function shouldRecompile($manifest, $providers) { return is_null($manifest) || $manifest['providers'] != $providers; } public function loadManifest() { $path = $this->manifestPath.'/services.json'; if ($this->files->exists($path)) { $manifest = json_decode($this->files->get($path), true); return array_merge($this->default, $manifest); } } public function writeManifest($manifest) { $path = $this->manifestPath.'/services.json'; $this->files->put($path, json_encode($manifest, JSON_PRETTY_PRINT)); return $manifest; } protected function freshManifest(array $providers) { list($eager, $deferred) = array(array(), array()); return compact('providers', 'eager', 'deferred'); } public function getFilesystem() { return $this->files; } }
