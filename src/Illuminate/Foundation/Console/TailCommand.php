<?php namespace Illuminate\Foundation\Console; use Illuminate\Console\Command; use Symfony\Component\Process\Process; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Input\InputArgument; class TailCommand extends Command { protected $name = 'tail'; protected $description = "Tail a log file on a remote server"; public function fire() { $path = $this->getPath($this->argument('connection')); if ($path) { $this->tailLogFile($path, $this->argument('connection')); } else { $this->error('Could not determine path to log file.'); } } protected function tailLogFile($path, $connection) { if (is_null($connection)) { $this->tailLocalLogs($path); } else { $this->tailRemoteLogs($path, $connection); } } protected function tailLocalLogs($path) { $output = $this->output; $lines = $this->option('lines'); with(new Process('tail -f -n '.$lines.' '.$path))->setTimeout(null)->run(function($type, $line) use ($output) { $output->write($line); }); } protected function tailRemoteLogs($path, $connection) { $out = $this->output; $lines = $this->option('lines'); $this->getRemote($connection)->run('tail -f -n '.$lines.' '.$path, function($line) use ($out) { $out->write($line); }); } protected function getRemote($connection) { return $this->laravel['remote']->connection($connection); } protected function getPath($connection) { if ($this->option('path')) return $this->option('path'); if (is_null($connection)) { return base_path().'/app/storage/logs/laravel.log'; } else { return $this->getRoot($connection).'/app/storage/logs/laravel.log'; } } protected function getRoot($connection) { return $this->laravel['config']['remote.connections.'.$connection.'.root']; } protected function getArguments() { return array( array('connection', InputArgument::OPTIONAL, 'The remote connection name'), ); } protected function getOptions() { return array( array('path', null, InputOption::VALUE_OPTIONAL, 'The fully qualified path to the log file.'), array('lines', null, InputOption::VALUE_OPTIONAL, 'The number of lines to tail.', 20), ); } }
