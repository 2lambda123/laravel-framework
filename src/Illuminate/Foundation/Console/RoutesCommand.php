<?php namespace Illuminate\Foundation\Console; use Illuminate\Http\Request; use Illuminate\Routing\Route; use Illuminate\Routing\Router; use Illuminate\Console\Command; use Symfony\Component\Console\Input\InputOption; class RoutesCommand extends Command { protected $name = 'routes'; protected $description = 'List all registered routes'; protected $router; protected $routes; protected $table; protected $headers = array( 'Domain', 'URI', 'Name', 'Action', 'Before Filters', 'After Filters' ); public function __construct(Router $router) { parent::__construct(); $this->router = $router; $this->routes = $router->getRoutes(); } public function fire() { $this->table = $this->getHelperSet()->get('table'); if (count($this->routes) == 0) { return $this->error("Your application doesn't have any routes."); } $this->displayRoutes($this->getRoutes()); } protected function getRoutes() { $results = array(); foreach($this->routes as $route) { $results[] = $this->getRouteInformation($route); } return array_filter($results); } protected function getRouteInformation(Route $route) { $uri = implode('|', $route->methods()).' '.$route->uri(); return $this->filterRoute(array( 'host' => $route->domain(), 'uri' => $uri, 'name' => $route->getName(), 'action' => $route->getActionName(), 'before' => $this->getBeforeFilters($route), 'after' => $this->getAfterFilters($route) )); } protected function displayRoutes(array $routes) { $this->table->setHeaders($this->headers)->setRows($routes); $this->table->render($this->getOutput()); } protected function getBeforeFilters($route) { $before = array_keys($route->beforeFilters()); $before = array_unique(array_merge($before, $this->getPatternFilters($route))); return implode(', ', $before); } protected function getPatternFilters($route) { $patterns = array(); foreach ($route->methods() as $method) { $inner = $this->getMethodPatterns($route->uri(), $method); $patterns = array_merge($patterns, array_keys($inner)); } return $patterns; } protected function getMethodPatterns($uri, $method) { return $this->router->findPatternFilters(Request::create($uri, $method)); } protected function getAfterFilters($route) { return implode(', ', array_keys($route->afterFilters())); } protected function filterRoute(array $route) { if (($this->option('name') && ! str_contains($route['name'], $this->option('name'))) || $this->option('path') && ! str_contains($route['uri'], $this->option('path'))) { return null; } else { return $route; } } protected function getOptions() { return array( array('name', null, InputOption::VALUE_OPTIONAL, 'Filter the routes by name.'), array('path', null, InputOption::VALUE_OPTIONAL, 'Filter the routes by path.'), ); } }
