<?php namespace Illuminate\Pagination; abstract class Presenter { protected $paginator; protected $currentPage; protected $lastPage; public function __construct(Paginator $paginator) { $this->paginator = $paginator; $this->lastPage = $this->paginator->getLastPage(); $this->currentPage = $this->paginator->getCurrentPage(); } abstract public function getPageLinkWrapper($url, $page); abstract public function getDisabledTextWrapper($text); abstract public function getActivePageWrapper($text); public function render() { if ($this->lastPage < 13) { $content = $this->getPageRange(1, $this->lastPage); } else { $content = $this->getPageSlider(); } return $this->getPrevious().$content.$this->getNext(); } public function getPageRange($start, $end) { $pages = array(); for ($page = $start; $page <= $end; $page++) { if ($this->currentPage == $page) { $pages[] = $this->getActivePageWrapper($page); } else { $pages[] = $this->getLink($page); } } return implode('', $pages); } protected function getPageSlider() { $window = 6; if ($this->currentPage <= $window) { $ending = $this->getFinish(); return $this->getPageRange(1, $window + 2).$ending; } elseif ($this->currentPage >= $this->lastPage - $window) { $start = $this->lastPage - 8; $content = $this->getPageRange($start, $this->lastPage); return $this->getStart().$content; } else { $content = $this->getAdjacentRange(); return $this->getStart().$content.$this->getFinish(); } } public function getAdjacentRange() { return $this->getPageRange($this->currentPage - 3, $this->currentPage + 3); } public function getStart() { return $this->getPageRange(1, 2).$this->getDots(); } public function getFinish() { $content = $this->getPageRange($this->lastPage - 1, $this->lastPage); return $this->getDots().$content; } public function getPrevious($text = '&laquo;') { if ($this->currentPage <= 1) { return $this->getDisabledTextWrapper($text); } else { $url = $this->paginator->getUrl($this->currentPage - 1); return $this->getPageLinkWrapper($url, $text); } } public function getNext($text = '&raquo;') { if ($this->currentPage >= $this->lastPage) { return $this->getDisabledTextWrapper($text); } else { $url = $this->paginator->getUrl($this->currentPage + 1); return $this->getPageLinkWrapper($url, $text); } } public function getDots() { return $this->getDisabledTextWrapper("..."); } public function getLink($page) { $url = $this->paginator->getUrl($page); return $this->getPageLinkWrapper($url, $page); } public function setCurrentPage($page) { $this->currentPage = $page; } public function setLastPage($page) { $this->lastPage = $page; } }
