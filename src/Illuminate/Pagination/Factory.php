<?php namespace Illuminate\Pagination; use Illuminate\Http\Request; use Illuminate\View\Factory as ViewFactory; use Symfony\Component\Translation\TranslatorInterface; class Factory { protected $request; protected $view; protected $trans; protected $viewName; protected $currentPage; protected $locale; protected $baseUrl; protected $pageName; public function __construct(Request $request, ViewFactory $view, TranslatorInterface $trans, $pageName = 'page') { $this->view = $view; $this->trans = $trans; $this->request = $request; $this->pageName = $pageName; $this->setupPaginationEnvironment(); } protected function setupPaginationEnvironment() { $this->view->addNamespace('pagination', __DIR__.'/views'); } public function make(array $items, $total, $perPage) { $paginator = new Paginator($this, $items, $total, $perPage); return $paginator->setupPaginationContext(); } public function getPaginationView(Paginator $paginator, $view = null) { $data = array('environment' => $this, 'paginator' => $paginator); return $this->view->make($this->getViewName($view), $data); } public function getCurrentPage() { $page = (int) $this->currentPage ?: $this->request->query->get($this->pageName, 1); if ($page < 1 || filter_var($page, FILTER_VALIDATE_INT) === false) { return 1; } return $page; } public function setCurrentPage($number) { $this->currentPage = $number; } public function getCurrentUrl() { return $this->baseUrl ?: $this->request->url(); } public function setBaseUrl($baseUrl) { $this->baseUrl = $baseUrl; } public function setPageName($pageName) { $this->pageName = $pageName; } public function getPageName() { return $this->pageName; } public function getViewName($view = null) { if ( ! is_null($view)) return $view; return $this->viewName ?: 'pagination::slider'; } public function setViewName($viewName) { $this->viewName = $viewName; } public function getLocale() { return $this->locale; } public function setLocale($locale) { $this->locale = $locale; } public function getRequest() { return $this->request; } public function setRequest(Request $request) { $this->request = $request; } public function getViewFactory() { return $this->view; } public function setViewFactory(ViewFactory $view) { $this->view = $view; } public function getTranslator() { return $this->trans; } }
