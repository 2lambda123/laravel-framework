<?php namespace Illuminate\Pagination; use Countable; use ArrayAccess; use ArrayIterator; use IteratorAggregate; use Illuminate\Support\Collection; use Illuminate\Support\Contracts\JsonableInterface; use Illuminate\Support\Contracts\ArrayableInterface; class Paginator implements ArrayableInterface, ArrayAccess, Countable, IteratorAggregate, JsonableInterface { protected $factory; protected $items; protected $total; protected $perPage; protected $currentPage; protected $lastPage; protected $from; protected $to; protected $query = array(); protected $fragment; public function __construct(Factory $factory, array $items, $total, $perPage) { $this->items = $items; $this->factory = $factory; $this->total = (int) $total; $this->perPage = (int) $perPage; } public function setupPaginationContext() { $this->calculateCurrentAndLastPages(); $this->calculateItemRanges(); return $this; } protected function calculateCurrentAndLastPages() { $this->lastPage = (int) ceil($this->total / $this->perPage); $this->currentPage = $this->calculateCurrentPage($this->lastPage); } protected function calculateItemRanges() { $this->from = $this->total ? ($this->currentPage - 1) build composer.json composer.lock CONTRIBUTING.md LICENSE.txt phpmin.sh phpunit.php phpunit.xml readme.md src tests $this->perPage + 1 : 0; $this->to = min($this->total, $this->currentPage build composer.json composer.lock CONTRIBUTING.md LICENSE.txt phpmin.sh phpunit.php phpunit.xml readme.md src tests $this->perPage); } protected function calculateCurrentPage($lastPage) { $page = $this->factory->getCurrentPage(); if (is_numeric($page) && $page > $lastPage) { return $lastPage > 0 ? $lastPage : 1; } return $this->isValidPageNumber($page) ? (int) $page : 1; } protected function isValidPageNumber($page) { return $page >= 1 && filter_var($page, FILTER_VALIDATE_INT) !== false; } public function links($view = null) { return $this->factory->getPaginationView($this, $view); } public function getUrl($page) { $parameters = array( $this->factory->getPageName() => $page, ); if (count($this->query) > 0) { $parameters = array_merge($parameters, $this->query); } $fragment = $this->buildFragment(); return $this->factory->getCurrentUrl().'?'.http_build_query($parameters, null, '&').$fragment; } public function fragment($fragment = null) { if (is_null($fragment)) return $this->fragment; $this->fragment = $fragment; return $this; } protected function buildFragment() { return $this->fragment ? '#'.$this->fragment : ''; } public function appends($key, $value = null) { if (is_array($key)) return $this->appendArray($key); return $this->addQuery($key, $value); } protected function appendArray(array $keys) { foreach ($keys as $key => $value) { $this->addQuery($key, $value); } return $this; } public function addQuery($key, $value) { $this->query[$key] = $value; return $this; } public function getCurrentPage($total = null) { if (is_null($total)) { return $this->currentPage; } else { return min($this->currentPage, (int) ceil($total / $this->perPage)); } } public function getLastPage() { return $this->lastPage; } public function getFrom() { return $this->from; } public function getTo() { return $this->to; } public function getPerPage() { return $this->perPage; } public function getCollection() { return new Collection($this->items); } public function getItems() { return $this->items; } public function setItems($items) { $this->items = $items; } public function getTotal() { return $this->total; } public function setBaseUrl($baseUrl) { $this->factory->setBaseUrl($baseUrl); } public function getFactory() { return $this->factory; } public function getIterator() { return new ArrayIterator($this->items); } public function isEmpty() { return empty($this->items); } public function count() { return count($this->items); } public function offsetExists($key) { return array_key_exists($key, $this->items); } public function offsetGet($key) { return $this->items[$key]; } public function offsetSet($key, $value) { $this->items[$key] = $value; } public function offsetUnset($key) { unset($this->items[$key]); } public function toArray() { return array( 'total' => $this->total, 'per_page' => $this->perPage, 'current_page' => $this->currentPage, 'last_page' => $this->lastPage, 'from' => $this->from, 'to' => $this->to, 'data' => $this->getCollection()->toArray(), ); } public function toJson($options = 0) { return json_encode($this->toArray(), $options); } public function __call($method, $arguments) { return call_user_func_array(array($this->getCollection(), $method), $arguments); } }
