<?php namespace Illuminate\Mail; use Swift_Mailer; use Illuminate\Support\ServiceProvider; use Swift_SmtpTransport as SmtpTransport; use Swift_MailTransport as MailTransport; use Illuminate\Mail\Transport\MailgunTransport; use Illuminate\Mail\Transport\MandrillTransport; use Swift_SendmailTransport as SendmailTransport; class MailServiceProvider extends ServiceProvider { protected $defer = true; public function register() { $this->registerSwiftMailer(); $this->app->bindShared('mailer', function($app) { $mailer = new Mailer($app['view'], $app['swift.mailer']); $mailer->setLogger($app['log'])->setQueue($app['queue']); $mailer->setContainer($app); $from = $app['config']['mail.from']; if (is_array($from) && isset($from['address'])) { $mailer->alwaysFrom($from['address'], $from['name']); } $pretend = $app['config']->get('mail.pretend', false); $mailer->pretend($pretend); return $mailer; }); } protected function registerSwiftMailer() { $config = $this->app['config']['mail']; $this->registerSwiftTransport($config); $this->app['swift.mailer'] = $this->app->share(function($app) { return new Swift_Mailer($app['swift.transport']); }); } protected function registerSwiftTransport($config) { switch ($config['driver']) { case 'smtp': return $this->registerSmtpTransport($config); case 'sendmail': return $this->registerSendmailTransport($config); case 'mail': return $this->registerMailTransport($config); case 'mailgun': return $this->registerMailgunTransport($config); case 'mandrill': return $this->registerMandrillTransport($config); default: throw new \InvalidArgumentException('Invalid mail driver.'); } } protected function registerSmtpTransport($config) { $this->app['swift.transport'] = $this->app->share(function($app) use ($config) { extract($config); $transport = SmtpTransport::newInstance($host, $port); if (isset($encryption)) { $transport->setEncryption($encryption); } if (isset($username)) { $transport->setUsername($username); $transport->setPassword($password); } return $transport; }); } protected function registerSendmailTransport($config) { $this->app['swift.transport'] = $this->app->share(function($app) use ($config) { return SendmailTransport::newInstance($config['sendmail']); }); } protected function registerMailTransport($config) { $this->app['swift.transport'] = $this->app->share(function() { return MailTransport::newInstance(); }); } protected function registerMailgunTransport($config) { $mailgun = $this->app['config']->get('services.mailgun', array()); $this->app->bindShared('swift.transport', function() use ($mailgun) { return new MailgunTransport($mailgun['secret'], $mailgun['domain']); }); } protected function registerMandrillTransport($config) { $mandrill = $this->app['config']->get('services.mandrill', array()); $this->app->bindShared('swift.transport', function() use ($mandrill) { return new MandrillTransport($mandrill['secret']); }); } public function provides() { return array('mailer', 'swift.mailer', 'swift.transport'); } }
