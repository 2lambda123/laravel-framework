<?php namespace Illuminate\Queue; use Closure; use DateTime; use Illuminate\Container\Container; use Illuminate\Support\SerializableClosure; abstract class Queue { protected $container; public function marshal() { throw new \RuntimeException("Push queues only supported by Iron."); } public function bulk($jobs, $data = '', $queue = null) { foreach ((array) $jobs as $job) { $this->push($job, $data, $queue); } } protected function createPayload($job, $data = '', $queue = null) { if ($job instanceof Closure) { return json_encode($this->createClosurePayload($job, $data)); } else { return json_encode(array('job' => $job, 'data' => $data)); } } protected function createClosurePayload($job, $data) { $closure = serialize(new SerializableClosure($job)); return array('job' => 'IlluminateQueueClosure', 'data' => compact('closure')); } protected function setMeta($payload, $key, $value) { $payload = json_decode($payload, true); return json_encode(array_set($payload, $key, $value)); } protected function getSeconds($delay) { if ($delay instanceof DateTime) { return max(0, $delay->getTimestamp() - $this->getTime()); } else { return intval($delay); } } public function getTime() { return time(); } public function setContainer(Container $container) { $this->container = $container; } }
