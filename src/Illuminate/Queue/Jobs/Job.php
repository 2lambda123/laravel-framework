<?php namespace Illuminate\Queue\Jobs; use DateTime; abstract class Job { protected $instance; protected $container; protected $queue; protected $deleted = false; abstract public function fire(); public function delete() { $this->deleted = true; } public function isDeleted() { return $this->deleted; } abstract public function release($delay = 0); abstract public function attempts(); abstract public function getRawBody(); protected function resolveAndFire(array $payload) { list($class, $method) = $this->parseJob($payload['job']); $this->instance = $this->resolve($class); $this->instance->{$method}($this, $payload['data']); } protected function resolve($class) { return $this->container->make($class); } protected function parseJob($job) { $segments = explode('@', $job); return count($segments) > 1 ? $segments : array($segments[0], 'fire'); } public function autoDelete() { return isset($this->instance->delete); } protected function getSeconds($delay) { if ($delay instanceof DateTime) { return max(0, $delay->getTimestamp() - $this->getTime()); } else { return intval($delay); } } public function getName() { return json_decode($this->getRawBody(), true)['job']; } public function getQueue() { return $this->queue; } }
