<?php namespace Illuminate\Queue; use Illuminate\Support\ServiceProvider; use Illuminate\Queue\Console\WorkCommand; use Illuminate\Queue\Console\ListenCommand; use Illuminate\Queue\Connectors\SqsConnector; use Illuminate\Queue\Console\SubscribeCommand; use Illuminate\Queue\Connectors\SyncConnector; use Illuminate\Queue\Connectors\IronConnector; use Illuminate\Queue\Connectors\RedisConnector; use Illuminate\Queue\Connectors\BeanstalkdConnector; use Illuminate\Queue\Failed\DatabaseFailedJobProvider; class QueueServiceProvider extends ServiceProvider { protected $defer = true; public function register() { $this->registerManager(); $this->registerWorker(); $this->registerListener(); $this->registerSubscriber(); $this->registerFailedJobServices(); } protected function registerManager() { $this->app->bindShared('queue', function($app) { $manager = new QueueManager($app); $this->registerConnectors($manager); return $manager; }); } protected function registerWorker() { $this->registerWorkCommand(); $this->app->bindShared('queue.worker', function($app) { return new Worker($app['queue'], $app['queue.failer'], $app['events']); }); } protected function registerWorkCommand() { $this->app->bindShared('command.queue.work', function($app) { return new WorkCommand($app['queue.worker']); }); $this->commands('command.queue.work'); } protected function registerListener() { $this->registerListenCommand(); $this->app->bindShared('queue.listener', function($app) { return new Listener($app['path.base']); }); } protected function registerListenCommand() { $this->app->bindShared('command.queue.listen', function($app) { return new ListenCommand($app['queue.listener']); }); $this->commands('command.queue.listen'); } protected function registerSubscriber() { $this->app->bindShared('command.queue.subscribe', function($app) { return new SubscribeCommand; }); $this->commands('command.queue.subscribe'); } public function registerConnectors($manager) { foreach (array('Sync', 'Beanstalkd', 'Redis', 'Sqs', 'Iron') as $connector) { $this->{"register{$connector}Connector"}($manager); } } protected function registerSyncConnector($manager) { $manager->addConnector('sync', function() { return new SyncConnector; }); } protected function registerBeanstalkdConnector($manager) { $manager->addConnector('beanstalkd', function() { return new BeanstalkdConnector; }); } protected function registerRedisConnector($manager) { $app = $this->app; $manager->addConnector('redis', function() use ($app) { return new RedisConnector($app['redis']); }); } protected function registerSqsConnector($manager) { $manager->addConnector('sqs', function() { return new SqsConnector; }); } protected function registerIronConnector($manager) { $app = $this->app; $manager->addConnector('iron', function() use ($app) { return new IronConnector($app['encrypter'], $app['request']); }); $this->registerIronRequestBinder(); } protected function registerIronRequestBinder() { $this->app->rebinding('request', function($app, $request) { if ($app['queue']->connected('iron')) { $app['queue']->connection('iron')->setRequest($request); } }); } protected function registerFailedJobServices() { $this->app->bindShared('queue.failer', function($app) { $config = $app['config']['queue.failed']; return new DatabaseFailedJobProvider($app['db'], $config['database'], $config['table']); }); } public function provides() { return array( 'queue', 'queue.worker', 'queue.listener', 'queue.failer', 'command.queue.work', 'command.queue.listen', 'command.queue.subscribe' ); } }
