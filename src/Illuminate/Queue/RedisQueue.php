<?php namespace Illuminate\Queue; use Illuminate\Redis\Database; use Illuminate\Queue\Jobs\RedisJob; class RedisQueue extends Queue implements QueueInterface { protected $redis; protected $connection; protected $default; public function __construct(Database $redis, $default = 'default', $connection = null) { $this->redis = $redis; $this->default = $default; $this->connection = $connection; } public function push($job, $data = '', $queue = null) { return $this->pushRaw($this->createPayload($job, $data), $queue); } public function pushRaw($payload, $queue = null, array $options = array()) { $this->redis->rpush($this->getQueue($queue), $payload); return array_get(json_decode($payload, true), 'id'); } public function later($delay, $job, $data = '', $queue = null) { $payload = $this->createPayload($job, $data); $delay = $this->getSeconds($delay); $this->redis->zadd($this->getQueue($queue).':delayed', $this->getTime() + $delay, $payload); return array_get(json_decode($payload, true), 'id'); } public function release($queue, $payload, $delay, $attempts) { $payload = $this->setMeta($payload, 'attempts', $attempts); $this->redis->zadd($this->getQueue($queue).':delayed', $this->getTime() + $delay, $payload); } public function pop($queue = null) { $original = $queue ?: $this->default; $this->migrateAllExpiredJobs($queue = $this->getQueue($queue)); $job = $this->redis->lpop($queue); if ( ! is_null($job)) { $this->redis->zadd($queue.':reserved', $this->getTime() + 60, $job); return new RedisJob($this->container, $this, $job, $original); } } public function deleteReserved($queue, $job) { $this->redis->zrem($this->getQueue($queue).':reserved', $job); } protected function migrateAllExpiredJobs($queue) { $this->migrateExpiredJobs($queue.':delayed', $queue); $this->migrateExpiredJobs($queue.':reserved', $queue); } public function migrateExpiredJobs($from, $to) { $jobs = $this->getExpiredJobs($from, $time = $this->getTime()); if (count($jobs) > 0) { $this->removeExpiredJobs($from, $time); call_user_func_array(array($this->redis, 'rpush'), array_merge(array($to), $jobs)); } } protected function getExpiredJobs($queue, $time) { return $this->redis->zrangebyscore($queue, '-inf', $time); } protected function removeExpiredJobs($queue, $time) { $this->redis->zremrangebyscore($queue, '-inf', $time); } protected function createPayload($job, $data = '', $queue = null) { $payload = parent::createPayload($job, $data); $payload = $this->setMeta($payload, 'id', $this->getRandomId()); return $this->setMeta($payload, 'attempts', 1); } protected function getRandomId() { return str_random(20); } protected function getQueue($queue) { return 'queues:'.($queue ?: $this->default); } public function getRedis() { return $this->redis; } }
