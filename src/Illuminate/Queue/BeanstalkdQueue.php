<?php namespace Illuminate\Queue; use Pheanstalk_Job; use Pheanstalk_Pheanstalk as Pheanstalk; use Illuminate\Queue\Jobs\BeanstalkdJob; class BeanstalkdQueue extends Queue implements QueueInterface { protected $pheanstalk; protected $default; protected $timeToRun; public function __construct(Pheanstalk $pheanstalk, $default, $timeToRun) { $this->default = $default; $this->timeToRun = $timeToRun; $this->pheanstalk = $pheanstalk; } public function push($job, $data = '', $queue = null) { return $this->pushRaw($this->createPayload($job, $data), $queue); } public function pushRaw($payload, $queue = null, array $options = array()) { return $this->pheanstalk->useTube($this->getQueue($queue))->put( $payload, Pheanstalk::DEFAULT_PRIORITY, Pheanstalk::DEFAULT_DELAY, $this->timeToRun ); } public function later($delay, $job, $data = '', $queue = null) { $payload = $this->createPayload($job, $data); $pheanstalk = $this->pheanstalk->useTube($this->getQueue($queue)); return $pheanstalk->put($payload, Pheanstalk::DEFAULT_PRIORITY, $this->getSeconds($delay)); } public function pop($queue = null) { $queue = $this->getQueue($queue); $job = $this->pheanstalk->watchOnly($queue)->reserve(0); if ($job instanceof Pheanstalk_Job) { return new BeanstalkdJob($this->container, $this->pheanstalk, $job, $queue); } } public function getQueue($queue) { return $queue ?: $this->default; } public function getPheanstalk() { return $this->pheanstalk; } }
