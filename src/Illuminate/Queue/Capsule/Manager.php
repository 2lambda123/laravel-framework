<?php namespace Illuminate\Queue\Capsule; use Illuminate\Support\Fluent; use Illuminate\Queue\QueueManager; use Illuminate\Container\Container; use Illuminate\Queue\QueueServiceProvider; class Manager { protected static $instance; protected $manager; public function __construct(Container $container = null) { $this->setupContainer($container); $this->setupDefaultConfiguration(); $this->setupManager(); $this->registerConnectors(); } protected function setupContainer($container) { $this->container = $container ?: new Container; $this->container->instance('config', new Fluent); } protected function setupDefaultConfiguration() { $this->container['config']['queue.default'] = 'default'; } protected function setupManager() { $this->manager = new QueueManager($this->container); } protected function registerConnectors() { $provider = new QueueServiceProvider($this->container); $provider->registerConnectors($this->manager); } public static function connection($connection = null) { return static::$instance->getConnection($connection); } public static function push($job, $data = '', $queue = null, $connection = null) { return static::$instance->connection($connection)->push($job, $data, $queue); } public static function bulk($jobs, $data = '', $queue = null, $connection = null) { return static::$instance->connection($connection)->bulk($jobs, $data, $queue); } public static function later($delay, $job, $data = '', $queue = null, $connection = null) { return static::$instance->connection($connection)->later($delay, $job, $data, $queue); } public function getConnection($name = null) { return $this->manager->connection($name); } public function addConnection(array $config, $name = 'default') { $this->container['config']["queue.connections.{$name}"] = $config; } public function setAsGlobal() { static::$instance = $this; } public function getQueueManager() { return $this->manager; } public function getContainer() { return $this->container; } public function setContainer(Container $container) { $this->container = $container; } public function __call($method, $parameters) { return call_user_func_array(array($this->manager, $method), $parameters); } public static function __callStatic($method, $parameters) { return call_user_func_array(array(static::connection(), $method), $parameters); } }
