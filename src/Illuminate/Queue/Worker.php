<?php namespace Illuminate\Queue; use Illuminate\Queue\Jobs\Job; use Illuminate\Events\Dispatcher; use Illuminate\Queue\Failed\FailedJobProviderInterface; class Worker { protected $manager; protected $failer; protected $events; public function __construct(QueueManager $manager, FailedJobProviderInterface $failer = null, Dispatcher $events = null) { $this->failer = $failer; $this->events = $events; $this->manager = $manager; } public function pop($connectionName, $queue = null, $delay = 0, $memory = 128, $sleep = 3, $maxTries = 0) { $connection = $this->manager->connection($connectionName); $job = $this->getNextJob($connection, $queue); if ( ! is_null($job)) { return $this->process( $this->manager->getName($connectionName), $job, $maxTries, $delay ); } else { $this->sleep($sleep); return ['job' => null, 'failed' => false]; } } protected function getNextJob($connection, $queue) { if (is_null($queue)) return $connection->pop(); foreach (explode(',', $queue) as $queue) { if ( ! is_null($job = $connection->pop($queue))) return $job; } } public function process($connection, Job $job, $maxTries = 0, $delay = 0) { if ($maxTries > 0 && $job->attempts() > $maxTries) { return $this->logFailedJob($connection, $job); } try { $job->fire(); if ($job->autoDelete()) $job->delete(); return ['job' => $job, 'failed' => false]; } catch (\Exception $e) { if ( ! $job->isDeleted()) $job->release($delay); throw $e; } } protected function logFailedJob($connection, Job $job) { if ($this->failer) { $this->failer->log($connection, $job->getQueue(), $job->getRawBody()); $job->delete(); $this->raiseFailedJobEvent($connection, $job); } return ['job' => $job, 'failed' => true]; } protected function raiseFailedJobEvent($connection, Job $job) { if ($this->events) { $data = json_decode($job->getRawBody(), true); $this->events->fire('illuminate.queue.failed', array($connection, $job, $data)); } } public function sleep($seconds) { sleep($seconds); } public function getManager() { return $this->manager; } public function setManager(QueueManager $manager) { $this->manager = $manager; } }
