<?php namespace Illuminate\Http; use Symfony\Component\HttpFoundation\ParameterBag; use Symfony\Component\HttpFoundation\Request as SymfonyRequest; class Request extends SymfonyRequest { protected $json; protected $sessionStore; public function instance() { return $this; } public function method() { return $this->getMethod(); } public function root() { return rtrim($this->getSchemeAndHttpHost().$this->getBaseUrl(), '/'); } public function url() { return rtrim(preg_replace('/\?.*/', '', $this->getUri()), '/'); } public function fullUrl() { $query = $this->getQueryString(); return $query ? $this->url().'?'.$query : $this->url(); } public function path() { $pattern = trim($this->getPathInfo(), '/'); return $pattern == '' ? '/' : $pattern; } public function decodedPath() { return rawurldecode($this->path()); } public function segment($index, $default = null) { return array_get($this->segments(), $index - 1, $default); } public function segments() { $segments = explode('/', $this->path()); return array_values(array_filter($segments)); } public function is() { foreach (func_get_args() as $pattern) { if (str_is($pattern, urldecode($this->path()))) { return true; } } return false; } public function ajax() { return $this->isXmlHttpRequest(); } public function secure() { return $this->isSecure(); } public function has($key) { if (count(func_get_args()) > 1) { foreach (func_get_args() as $value) { if ( ! $this->has($value)) return false; } return true; } if (is_bool($this->input($key)) || is_array($this->input($key))) { return true; } return trim((string) $this->input($key)) !== ''; } public function all() { return array_merge_recursive($this->input(), $this->files->all()); } public function input($key = null, $default = null) { $input = $this->getInputSource()->all() + $this->query->all(); return array_get($input, $key, $default); } public function only($keys) { $keys = is_array($keys) ? $keys : func_get_args(); return array_only($this->input(), $keys) + array_fill_keys($keys, null); } public function except($keys) { $keys = is_array($keys) ? $keys : func_get_args(); $results = $this->input(); foreach ($keys as $key) array_forget($results, $key); return $results; } public function query($key = null, $default = null) { return $this->retrieveItem('query', $key, $default); } public function hasCookie($key) { return ! is_null($this->cookie($key)); } public function cookie($key = null, $default = null) { return $this->retrieveItem('cookies', $key, $default); } public function file($key = null, $default = null) { return array_get($this->files->all(), $key, $default); } public function hasFile($key) { if (is_array($file = $this->file($key))) $file = head($file); return $file instanceof \SplFileInfo && $file->getPath() != ''; } public function header($key = null, $default = null) { return $this->retrieveItem('headers', $key, $default); } public function server($key = null, $default = null) { return $this->retrieveItem('server', $key, $default); } public function old($key = null, $default = null) { return $this->session()->getOldInput($key, $default); } public function flash($filter = null, $keys = array()) { $flash = ( ! is_null($filter)) ? $this->$filter($keys) : $this->input(); $this->session()->flashInput($flash); } public function flashOnly($keys) { $keys = is_array($keys) ? $keys : func_get_args(); return $this->flash('only', $keys); } public function flashExcept($keys) { $keys = is_array($keys) ? $keys : func_get_args(); return $this->flash('except', $keys); } public function flush() { $this->session()->flashInput(array()); } protected function retrieveItem($source, $key, $default) { if (is_null($key)) { return $this->$source->all(); } else { return $this->$source->get($key, $default, true); } } public function merge(array $input) { $this->getInputSource()->add($input); } public function replace(array $input) { $this->getInputSource()->replace($input); } public function json($key = null, $default = null) { if ( ! isset($this->json)) { $this->json = new ParameterBag((array) json_decode($this->getContent(), true)); } if (is_null($key)) return $this->json; return array_get($this->json->all(), $key, $default); } protected function getInputSource() { if ($this->isJson()) return $this->json(); return $this->getMethod() == 'GET' ? $this->query : $this->request; } public function isJson() { return str_contains($this->header('CONTENT_TYPE'), '/json'); } public function wantsJson() { $acceptable = $this->getAcceptableContentTypes(); return isset($acceptable[0]) && $acceptable[0] == 'application/json'; } public function format($default = 'html') { foreach ($this->getAcceptableContentTypes() as $type) { if ($format = $this->getFormat($type)) return $format; } return $default; } public static function createFromBase(SymfonyRequest $request) { if ($request instanceof static) return $request; return with($self = new static)->duplicate( $request->query->all(), $request->request->all(), $request->attributes->all(), $request->cookies->all(), $request->files->all(), $request->server->all() ); } public function session() { if ( ! $this->hasSession()) { throw new \RuntimeException("Session store not set on request."); } return $this->getSession(); } }
