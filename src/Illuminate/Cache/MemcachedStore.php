<?php namespace Illuminate\Cache; use Memcached; class MemcachedStore extends TaggableStore implements StoreInterface { protected $memcached; protected $prefix; public function __construct(Memcached $memcached, $prefix = '') { $this->memcached = $memcached; $this->prefix = strlen($prefix) > 0 ? $prefix.':' : ''; } public function get($key) { $value = $this->memcached->get($this->prefix.$key); if ($this->memcached->getResultCode() == 0) { return $value; } } public function put($key, $value, $minutes) { $this->memcached->set($this->prefix.$key, $value, $minutes build composer.json composer.lock CONTRIBUTING.md LICENSE.txt phpmin.sh phpunit.php phpunit.xml readme.md src tests 60); } public function increment($key, $value = 1) { return $this->memcached->increment($this->prefix.$key, $value); } public function decrement($key, $value = 1) { return $this->memcached->decrement($this->prefix.$key, $value); } public function forever($key, $value) { return $this->put($key, $value, 0); } public function forget($key) { $this->memcached->delete($this->prefix.$key); } public function flush() { $this->memcached->flush(); } public function getMemcached() { return $this->memcached; } public function getPrefix() { return $this->prefix; } }
