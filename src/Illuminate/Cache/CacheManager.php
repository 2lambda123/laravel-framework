<?php namespace Illuminate\Cache; use Illuminate\Support\Manager; class CacheManager extends Manager { protected function createApcDriver() { return $this->repository(new ApcStore(new ApcWrapper, $this->getPrefix())); } protected function createArrayDriver() { return $this->repository(new ArrayStore); } protected function createFileDriver() { $path = $this->app['config']['cache.path']; return $this->repository(new FileStore($this->app['files'], $path)); } protected function createMemcachedDriver() { $servers = $this->app['config']['cache.memcached']; $memcached = $this->app['memcached.connector']->connect($servers); return $this->repository(new MemcachedStore($memcached, $this->getPrefix())); } protected function createWincacheDriver() { return $this->repository(new WinCacheStore($this->getPrefix())); } protected function createXcacheDriver() { return $this->repository(new XCacheStore($this->getPrefix())); } protected function createRedisDriver() { $redis = $this->app['redis']; return $this->repository(new RedisStore($redis, $this->getPrefix())); } protected function createDatabaseDriver() { $connection = $this->getDatabaseConnection(); $encrypter = $this->app['encrypter']; $table = $this->app['config']['cache.table']; $prefix = $this->getPrefix(); return $this->repository(new DatabaseStore($connection, $encrypter, $table, $prefix)); } protected function getDatabaseConnection() { $connection = $this->app['config']['cache.connection']; return $this->app['db']->connection($connection); } public function getPrefix() { return $this->app['config']['cache.prefix']; } public function setPrefix($name) { $this->app['config']['cache.prefix'] = $name; } protected function repository(StoreInterface $store) { return new Repository($store); } public function getDefaultDriver() { return $this->app['config']['cache.driver']; } public function setDefaultDriver($name) { $this->app['config']['cache.driver'] = $name; } }
