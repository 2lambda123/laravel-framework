<?php namespace Illuminate\Cache; use Illuminate\Filesystem\Filesystem; class FileStore implements StoreInterface { protected $files; protected $directory; public function __construct(Filesystem $files, $directory) { $this->files = $files; $this->directory = $directory; } public function get($key) { $path = $this->path($key); if ( ! $this->files->exists($path)) { return null; } try { $expire = substr($contents = $this->files->get($path), 0, 10); } catch (\Exception $e) { return null; } if (time() >= $expire) { return $this->forget($key); } return unserialize(substr($contents, 10)); } public function put($key, $value, $minutes) { $value = $this->expiration($minutes).serialize($value); $this->createCacheDirectory($path = $this->path($key)); $this->files->put($path, $value); } protected function createCacheDirectory($path) { try { $this->files->makeDirectory(dirname($path), 0777, true, true); } catch (\Exception $e) { } } public function increment($key, $value = 1) { throw new \LogicException("Increment operations not supported by this driver."); } public function decrement($key, $value = 1) { throw new \LogicException("Decrement operations not supported by this driver."); } public function forever($key, $value) { return $this->put($key, $value, 0); } public function forget($key) { $file = $this->path($key); if ($this->files->exists($file)) { $this->files->delete($file); } } public function flush() { foreach ($this->files->directories($this->directory) as $directory) { $this->files->deleteDirectory($directory); } } protected function path($key) { $parts = array_slice(str_split($hash = md5($key), 2), 0, 2); return $this->directory.'/'.join('/', $parts).'/'.$hash; } protected function expiration($minutes) { if ($minutes === 0) return 9999999999; return time() + ($minutes build composer.json composer.lock CONTRIBUTING.md LICENSE.txt phpmin.sh phpunit.php phpunit.xml readme.md src tests 60); } public function getFilesystem() { return $this->files; } public function getDirectory() { return $this->directory; } public function getPrefix() { return ''; } }
