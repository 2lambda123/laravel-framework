<?php namespace Illuminate\Session; use Closure; use Carbon\Carbon; use Symfony\Component\HttpFoundation\Cookie; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\HttpKernelInterface; class Middleware implements HttpKernelInterface { protected $app; protected $manager; protected $reject; public function __construct(HttpKernelInterface $app, SessionManager $manager, Closure $reject = null) { $this->app = $app; $this->reject = $reject; $this->manager = $manager; } public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true) { $this->checkRequestForArraySessions($request); if ($this->sessionConfigured()) { $session = $this->startSession($request); $request->setSession($session); } $response = $this->app->handle($request, $type, $catch); if ($this->sessionConfigured()) { $this->closeSession($session); $this->addCookieToResponse($response, $session); } return $response; } public function checkRequestForArraySessions(Request $request) { if (is_null($this->reject)) return; if (call_user_func($this->reject, $request)) { $this->manager->setDefaultDriver('array'); } } protected function startSession(Request $request) { with($session = $this->getSession($request))->setRequestOnHandler($request); $session->start(); return $session; } protected function closeSession(SessionInterface $session) { $session->save(); $this->collectGarbage($session); } protected function getUrl(Request $request) { $url = rtrim(preg_replace('/\?.*/', '', $request->getUri()), '/'); return $request->getQueryString() ? $url.'?'.$request->getQueryString() : $url; } protected function collectGarbage(SessionInterface $session) { $config = $this->manager->getSessionConfig(); if ($this->configHitsLottery($config)) { $session->getHandler()->gc($this->getLifetimeSeconds()); } } protected function configHitsLottery(array $config) { return mt_rand(1, $config['lottery'][1]) <= $config['lottery'][0]; } protected function addCookieToResponse(Response $response, SessionInterface $session) { $s = $session; if ($this->sessionIsPersistent($c = $this->manager->getSessionConfig())) { $secure = array_get($c, 'secure', false); $response->headers->setCookie(new Cookie( $s->getName(), $s->getId(), $this->getCookieLifetime(), $c['path'], $c['domain'], $secure )); } } protected function getLifetimeSeconds() { return array_get($this->manager->getSessionConfig(), 'lifetime') build composer.json composer.lock CONTRIBUTING.md LICENSE.txt phpmin.sh phpunit.php phpunit.xml readme.md src tests 60; } protected function getCookieLifetime() { $config = $this->manager->getSessionConfig(); return $config['expire_on_close'] ? 0 : Carbon::now()->addMinutes($config['lifetime']); } protected function sessionConfigured() { return ! is_null(array_get($this->manager->getSessionConfig(), 'driver')); } protected function sessionIsPersistent(array $config = null) { $config = $config ?: $this->manager->getSessionConfig(); return ! in_array($config['driver'], array(null, 'array')); } public function getSession(Request $request) { $session = $this->manager->driver(); $session->setId($request->cookies->get($session->getName())); return $session; } }
