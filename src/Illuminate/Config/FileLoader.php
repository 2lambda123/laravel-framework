<?php namespace Illuminate\Config; use Illuminate\Filesystem\Filesystem; class FileLoader implements LoaderInterface { protected $files; protected $defaultPath; protected $hints = array(); protected $exists = array(); public function __construct(Filesystem $files, $defaultPath) { $this->files = $files; $this->defaultPath = $defaultPath; } public function load($environment, $group, $namespace = null) { $items = array(); $path = $this->getPath($namespace); if (is_null($path)) { return $items; } $file = "{$path}/{$group}.php"; if ($this->files->exists($file)) { $items = $this->files->getRequire($file); } $file = "{$path}/{$environment}/{$group}.php"; if ($this->files->exists($file)) { $items = $this->mergeEnvironment($items, $file); } return $items; } protected function mergeEnvironment(array $items, $file) { return array_replace_recursive($items, $this->files->getRequire($file)); } public function exists($group, $namespace = null) { $key = $group.$namespace; if (isset($this->exists[$key])) { return $this->exists[$key]; } $path = $this->getPath($namespace); if (is_null($path)) { return $this->exists[$key] = false; } $file = "{$path}/{$group}.php"; $exists = $this->files->exists($file); return $this->exists[$key] = $exists; } public function cascadePackage($env, $package, $group, $items) { $file = "packages/{$package}/{$group}.php"; if ($this->files->exists($path = $this->defaultPath.'/'.$file)) { $items = array_merge($items, $this->getRequire($path)); } $path = $this->getPackagePath($env, $package, $group); if ($this->files->exists($path)) { $items = array_merge($items, $this->getRequire($path)); } return $items; } protected function getPackagePath($env, $package, $group) { $file = "packages/{$package}/{$env}/{$group}.php"; return $this->defaultPath.'/'.$file; } protected function getPath($namespace) { if (is_null($namespace)) { return $this->defaultPath; } elseif (isset($this->hints[$namespace])) { return $this->hints[$namespace]; } } public function addNamespace($namespace, $hint) { $this->hints[$namespace] = $hint; } public function getNamespaces() { return $this->hints; } protected function getRequire($path) { return $this->files->getRequire($path); } public function getFilesystem() { return $this->files; } }
