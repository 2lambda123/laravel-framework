<?php namespace Illuminate\Database; use Illuminate\Support\ServiceProvider; use Illuminate\Database\Migrations\Migrator; use Illuminate\Database\Migrations\MigrationCreator; use Illuminate\Database\Console\Migrations\ResetCommand; use Illuminate\Database\Console\Migrations\RefreshCommand; use Illuminate\Database\Console\Migrations\InstallCommand; use Illuminate\Database\Console\Migrations\MigrateCommand; use Illuminate\Database\Console\Migrations\RollbackCommand; use Illuminate\Database\Console\Migrations\MigrateMakeCommand; use Illuminate\Database\Migrations\DatabaseMigrationRepository; class MigrationServiceProvider extends ServiceProvider { protected $defer = true; public function register() { $this->registerRepository(); $this->registerMigrator(); $this->registerCommands(); } protected function registerRepository() { $this->app->bindShared('migration.repository', function($app) { $table = $app['config']['database.migrations']; return new DatabaseMigrationRepository($app['db'], $table); }); } protected function registerMigrator() { $this->app->bindShared('migrator', function($app) { $repository = $app['migration.repository']; return new Migrator($repository, $app['db'], $app['files']); }); } protected function registerCommands() { $commands = array('Migrate', 'Rollback', 'Reset', 'Refresh', 'Install', 'Make'); foreach ($commands as $command) { $this->{'register'.$command.'Command'}(); } $this->commands( 'command.migrate', 'command.migrate.make', 'command.migrate.install', 'command.migrate.rollback', 'command.migrate.reset', 'command.migrate.refresh' ); } protected function registerMigrateCommand() { $this->app->bindShared('command.migrate', function($app) { $packagePath = $app['path.base'].'/vendor'; return new MigrateCommand($app['migrator'], $packagePath); }); } protected function registerRollbackCommand() { $this->app->bindShared('command.migrate.rollback', function($app) { return new RollbackCommand($app['migrator']); }); } protected function registerResetCommand() { $this->app->bindShared('command.migrate.reset', function($app) { return new ResetCommand($app['migrator']); }); } protected function registerRefreshCommand() { $this->app->bindShared('command.migrate.refresh', function($app) { return new RefreshCommand; }); } protected function registerInstallCommand() { $this->app->bindShared('command.migrate.install', function($app) { return new InstallCommand($app['migration.repository']); }); } protected function registerMakeCommand() { $this->app->bindShared('migration.creator', function($app) { return new MigrationCreator($app['files']); }); $this->app->bindShared('command.migrate.make', function($app) { $creator = $app['migration.creator']; $packagePath = $app['path.base'].'/vendor'; return new MigrateMakeCommand($creator, $packagePath); }); } public function provides() { return array( 'migrator', 'migration.repository', 'command.migrate', 'command.migrate.rollback', 'command.migrate.reset', 'command.migrate.refresh', 'command.migrate.install', 'migration.creator', 'command.migrate.make', ); } }
