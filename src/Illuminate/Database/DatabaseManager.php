<?php namespace Illuminate\Database; use Illuminate\Database\Connectors\ConnectionFactory; class DatabaseManager implements ConnectionResolverInterface { protected $app; protected $factory; protected $connections = array(); protected $extensions = array(); public function __construct($app, ConnectionFactory $factory) { $this->app = $app; $this->factory = $factory; } public function connection($name = null) { $name = $name ?: $this->getDefaultConnection(); if ( ! isset($this->connections[$name])) { $connection = $this->makeConnection($name); $this->connections[$name] = $this->prepare($connection); } return $this->connections[$name]; } public function reconnect($name = null) { $name = $name ?: $this->getDefaultConnection(); $this->disconnect($name); return $this->connection($name); } public function disconnect($name = null) { $name = $name ?: $this->getDefaultConnection(); unset($this->connections[$name]); } protected function makeConnection($name) { $config = $this->getConfig($name); if (isset($this->extensions[$name])) { return call_user_func($this->extensions[$name], $config, $name); } $driver = $config['driver']; if (isset($this->extensions[$driver])) { return call_user_func($this->extensions[$driver], $config, $name); } return $this->factory->make($config, $name); } protected function prepare(Connection $connection) { $connection->setFetchMode($this->app['config']['database.fetch']); if ($this->app->bound('events')) { $connection->setEventDispatcher($this->app['events']); } $app = $this->app; $connection->setCacheManager(function() use ($app) { return $app['cache']; }); $connection->setPaginator(function() use ($app) { return $app['paginator']; }); return $connection; } protected function getConfig($name) { $name = $name ?: $this->getDefaultConnection(); $connections = $this->app['config']['database.connections']; if (is_null($config = array_get($connections, $name))) { throw new \InvalidArgumentException("Database [$name] not configured."); } return $config; } public function getDefaultConnection() { return $this->app['config']['database.default']; } public function setDefaultConnection($name) { $this->app['config']['database.default'] = $name; } public function extend($name, $resolver) { $this->extensions[$name] = $resolver; } public function getConnections() { return $this->connections; } public function __call($method, $parameters) { return call_user_func_array(array($this->connection(), $method), $parameters); } }
