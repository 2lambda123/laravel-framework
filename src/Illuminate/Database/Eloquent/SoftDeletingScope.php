<?php namespace Illuminate\Database\Eloquent; class SoftDeletingScope implements ScopeInterface { protected $extensions = ['ForceDelete', 'Restore', 'WithTrashed', 'OnlyTrashed']; public function apply(Builder $builder) { $model = $builder->getModel(); $builder->whereNull($model->getQualifiedDeletedAtColumn()); $this->extend($builder); } public function remove(Builder $builder) { $column = $builder->getModel()->getQualifiedDeletedAtColumn(); $query = $builder->getQuery(); foreach ((array) $query->wheres as $key => $where) { if ($this->isSoftDeleteConstraint($where, $column)) { unset($query->wheres[$key]); $query->wheres = array_values($query->wheres); } } } public function extend(Builder $builder) { foreach ($this->extensions as $extension) { $this->{"add{$extension}"}($builder); } $builder->onDelete(function(Builder $builder) { $column = $builder->getModel()->getDeletedAtColumn(); return $builder->update(array( $column => $builder->getModel()->freshTimestampString() )); }); } protected function addForceDelete(Builder $builder) { $builder->macro('forceDelete', function(Builder $builder) { return $builder->getQuery()->delete(); }); } protected function addRestore(Builder $builder) { $builder->macro('restore', function(Builder $builder) { $builder->withTrashed(); return $builder->update(array($builder->getModel()->getDeletedAtColumn() => null)); }); } protected function addWithTrashed(Builder $builder) { $builder->macro('withTrashed', function(Builder $builder) { $this->remove($builder); return $builder; }); } protected function addOnlyTrashed(Builder $builder) { $builder->macro('onlyTrashed', function(Builder $builder) { $this->remove($builder); $builder->getQuery()->whereNotNull($builder->getModel()->getQualifiedDeletedAtColumn()); return $builder; }); } protected function isSoftDeleteConstraint(array $where, $column) { return $where['type'] == 'Null' && $where['column'] == $column; } }
