<?php namespace Illuminate\Database\Eloquent\Relations; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\Builder; abstract class MorphOneOrMany extends HasOneOrMany { protected $morphType; protected $morphClass; public function __construct(Builder $query, Model $parent, $type, $id, $localKey) { $this->morphType = $type; $this->morphClass = get_class($parent); parent::__construct($query, $parent, $id, $localKey); } public function addConstraints() { if (static::$constraints) { parent::addConstraints(); $this->query->where($this->morphType, $this->morphClass); } } public function getRelationCountQuery(Builder $query, Builder $parent) { $query = parent::getRelationCountQuery($query, $parent); return $query->where($this->morphType, $this->morphClass); } public function addEagerConstraints(array $models) { parent::addEagerConstraints($models); $this->query->where($this->morphType, $this->morphClass); } public function save(Model $model) { $model->setAttribute($this->getPlainMorphType(), $this->morphClass); return parent::save($model); } public function create(array $attributes) { $foreign = $this->getForeignAttributesForCreate(); $attributes = array_merge($attributes, $foreign); $instance = $this->related->newInstance($attributes); $instance->save(); return $instance; } protected function getForeignAttributesForCreate() { $foreign = array($this->getPlainForeignKey() => $this->getParentKey()); $foreign[last(explode('.', $this->morphType))] = $this->morphClass; return $foreign; } public function getMorphType() { return $this->morphType; } public function getPlainMorphType() { return last(explode('.', $this->morphType)); } public function getMorphClass() { return $this->morphClass; } }
