<?php namespace Illuminate\Database\Eloquent\Relations; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\Builder; use Illuminate\Database\Query\Expression; use Illuminate\Database\Eloquent\Collection; class HasManyThrough extends Relation { protected $farParent; protected $firstKey; protected $secondKey; public function __construct(Builder $query, Model $farParent, Model $parent, $firstKey, $secondKey) { $this->firstKey = $firstKey; $this->secondKey = $secondKey; $this->farParent = $farParent; parent::__construct($query, $parent); } public function addConstraints() { $parentTable = $this->parent->getTable(); $this->setJoin(); if (static::$constraints) { $this->query->where($parentTable.'.'.$this->firstKey, '=', $this->farParent->getKey()); } } public function getRelationCountQuery(Builder $query, Builder $parent) { $parentTable = $this->parent->getTable(); $this->setJoin($query); $query->select(new Expression('count(*)')); $key = $this->wrap($parentTable.'.'.$this->firstKey); return $query->where($this->getHasCompareKey(), '=', new Expression($key)); } protected function setJoin(Builder $query = null) { $query = $query ?: $this->query; $foreignKey = $this->related->getTable().'.'.$this->secondKey; $query->join($this->parent->getTable(), $this->getQualifiedParentKeyName(), '=', $foreignKey); } public function addEagerConstraints(array $models) { $table = $this->parent->getTable(); $this->query->whereIn($table.'.'.$this->firstKey, $this->getKeys($models)); } public function initRelation(array $models, $relation) { foreach ($models as $model) { $model->setRelation($relation, $this->related->newCollection()); } return $models; } public function match(array $models, Collection $results, $relation) { $dictionary = $this->buildDictionary($results); foreach ($models as $model) { $key = $model->getKey(); if (isset($dictionary[$key])) { $value = $this->related->newCollection($dictionary[$key]); $model->setRelation($relation, $value); } } return $models; } protected function buildDictionary(Collection $results) { $dictionary = array(); $foreign = $this->farParent->getForeignKey(); foreach ($results as $result) { $dictionary[$result->{$foreign}][] = $result; } return $dictionary; } public function getResults() { return $this->get(); } public function get($columns = array('*')) { $select = $this->getSelectColumns($columns); $models = $this->query->addSelect($select)->getModels(); if (count($models) > 0) { $models = $this->query->eagerLoadRelations($models); } return $this->related->newCollection($models); } protected function getSelectColumns(array $columns = array('*')) { if ($columns == array('*')) { $columns = array($this->related->getTable().'.*'); } return array_merge($columns, array($this->parent->getTable().'.'.$this->firstKey)); } protected function getQualifiedParentKeyName() { return $this->parent->getQualifiedKeyName(); } public function getHasCompareKey() { return $this->farParent->getQualifiedKeyName(); } }
