<?php namespace Illuminate\Exception; use Closure; use ErrorException; use ReflectionFunction; use Illuminate\Support\Contracts\ResponsePreparerInterface; use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface; use Symfony\Component\Debug\Exception\FatalErrorException as FatalError; class Handler { protected $responsePreparer; protected $plainDisplayer; protected $debugDisplayer; protected $debug; protected $handlers = array(); protected $handled = array(); public function __construct(ResponsePreparerInterface $responsePreparer, ExceptionDisplayerInterface $plainDisplayer, ExceptionDisplayerInterface $debugDisplayer, $debug = true) { $this->debug = $debug; $this->plainDisplayer = $plainDisplayer; $this->debugDisplayer = $debugDisplayer; $this->responsePreparer = $responsePreparer; } public function register($environment) { $this->registerErrorHandler(); $this->registerExceptionHandler(); if ($environment != 'testing') $this->registerShutdownHandler(); } protected function registerErrorHandler() { set_error_handler(array($this, 'handleError')); } protected function registerExceptionHandler() { set_exception_handler(array($this, 'handleException')); } protected function registerShutdownHandler() { register_shutdown_function(array($this, 'handleShutdown')); } public function handleError($level, $message, $file = '', $line = 0, $context = array()) { if (error_reporting() & $level) { throw new ErrorException($message, 0, $level, $file, $line); } } public function handleException($exception) { $response = $this->callCustomHandlers($exception); if ( ! is_null($response)) { $response = $this->prepareResponse($response); } else { $response = $this->displayException($exception); } return $this->sendResponse($response); } protected function sendResponse($response) { return $this->responsePreparer->readyForResponses() && ! $this->runningInConsole() ? $response : $response->send(); } public function handleShutdown() { $error = error_get_last(); if ( ! is_null($error)) { extract($error); if ( ! $this->isFatal($type)) return; $this->handleException(new FatalError($message, $type, 0, $file, $line))->send(); } } protected function isFatal($type) { return in_array($type, array(E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_PARSE)); } public function handleConsole($exception) { return $this->callCustomHandlers($exception, true); } protected function callCustomHandlers($exception, $fromConsole = false) { foreach ($this->handlers as $handler) { if ( ! $this->handlesException($handler, $exception)) { continue; } elseif ($exception instanceof HttpExceptionInterface) { $code = $exception->getStatusCode(); } else { $code = 500; } try { $response = $handler($exception, $code, $fromConsole); } catch (\Exception $e) { $response = $this->formatException($e); } if (isset($response) && ! is_null($response)) { return $response; } } } protected function displayException($exception) { $displayer = $this->debug ? $this->debugDisplayer : $this->plainDisplayer; return $displayer->display($exception); } protected function handlesException(Closure $handler, $exception) { $reflection = new ReflectionFunction($handler); return $reflection->getNumberOfParameters() == 0 || $this->hints($reflection, $exception); } protected function hints(ReflectionFunction $reflection, $exception) { $parameters = $reflection->getParameters(); $expected = $parameters[0]; return ! $expected->getClass() || $expected->getClass()->isInstance($exception); } protected function formatException(\Exception $e) { if ($this->debug) { $location = $e->getMessage().' in '.$e->getFile().':'.$e->getLine(); return 'Error in exception handler: '.$location; } return 'Error in exception handler.'; } public function error(Closure $callback) { array_unshift($this->handlers, $callback); } public function pushError(Closure $callback) { $this->handlers[] = $callback; } protected function prepareResponse($response) { return $this->responsePreparer->prepareResponse($response); } public function runningInConsole() { return php_sapi_name() == 'cli'; } public function setDebug($debug) { $this->debug = $debug; } }
