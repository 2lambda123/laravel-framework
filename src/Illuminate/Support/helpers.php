<?php if ( ! function_exists('action')) { function action($name, $parameters = array()) { return app('url')->action($name, $parameters); } } if ( ! function_exists('app')) { function app($make = null) { if ( ! is_null($make)) { return app()->make($make); } return Illuminate\Support\Facades\Facade::getFacadeApplication(); } } if ( ! function_exists('app_path')) { function app_path($path = '') { return app('path').($path ? '/'.$path : $path); } } if ( ! function_exists('append_config')) { function append_config(array $array) { $start = 9999; foreach ($array as $key => $value) { if (is_numeric($key)) { $start++; $array[$start] = array_pull($array, $key); } } return $array; } } if ( ! function_exists('array_add')) { function array_add($array, $key, $value) { if ( ! isset($array[$key])) $array[$key] = $value; return $array; } } if ( ! function_exists('array_build')) { function array_build($array, Closure $callback) { $results = array(); foreach ($array as $key => $value) { list($innerKey, $innerValue) = call_user_func($callback, $key, $value); $results[$innerKey] = $innerValue; } return $results; } } if ( ! function_exists('array_divide')) { function array_divide($array) { return array(array_keys($array), array_values($array)); } } if ( ! function_exists('array_dot')) { function array_dot($array, $prepend = '') { $results = array(); foreach ($array as $key => $value) { if (is_array($value)) { $results = array_merge($results, array_dot($value, $prepend.$key.'.')); } else { $results[$prepend.$key] = $value; } } return $results; } } if ( ! function_exists('array_except')) { function array_except($array, $keys) { return array_diff_key($array, array_flip((array) $keys)); } } if ( ! function_exists('array_fetch')) { function array_fetch($array, $key) { foreach (explode('.', $key) as $segment) { $results = array(); foreach ($array as $value) { $value = (array) $value; $results[] = $value[$segment]; } $array = array_values($results); } return array_values($results); } } if ( ! function_exists('array_first')) { function array_first($array, $callback, $default = null) { foreach ($array as $key => $value) { if (call_user_func($callback, $key, $value)) return $value; } return value($default); } } if ( ! function_exists('array_last')) { function array_last($array, $callback, $default = null) { return array_first(array_reverse($array), $callback, $default); } } if ( ! function_exists('array_flatten')) { function array_flatten($array) { $return = array(); array_walk_recursive($array, function($x) use (&$return) { $return[] = $x; }); return $return; } } if ( ! function_exists('array_forget')) { function array_forget(&$array, $key) { $keys = explode('.', $key); while (count($keys) > 1) { $key = array_shift($keys); if ( ! isset($array[$key]) || ! is_array($array[$key])) { return; } $array =& $array[$key]; } unset($array[array_shift($keys)]); } } if ( ! function_exists('array_get')) { function array_get($array, $key, $default = null) { if (is_null($key)) return $array; if (isset($array[$key])) return $array[$key]; foreach (explode('.', $key) as $segment) { if ( ! is_array($array) || ! array_key_exists($segment, $array)) { return value($default); } $array = $array[$segment]; } return $array; } } if ( ! function_exists('array_only')) { function array_only($array, $keys) { return array_intersect_key($array, array_flip((array) $keys)); } } if ( ! function_exists('array_pluck')) { function array_pluck($array, $value, $key = null) { $results = array(); foreach ($array as $item) { $itemValue = is_object($item) ? $item->{$value} : $item[$value]; if (is_null($key)) { $results[] = $itemValue; } else { $itemKey = is_object($item) ? $item->{$key} : $item[$key]; $results[$itemKey] = $itemValue; } } return $results; } } if ( ! function_exists('array_pull')) { function array_pull(&$array, $key, $default = null) { $value = array_get($array, $key, $default); array_forget($array, $key); return $value; } } if ( ! function_exists('array_set')) { function array_set(&$array, $key, $value) { if (is_null($key)) return $array = $value; $keys = explode('.', $key); while (count($keys) > 1) { $key = array_shift($keys); if ( ! isset($array[$key]) || ! is_array($array[$key])) { $array[$key] = array(); } $array =& $array[$key]; } $array[array_shift($keys)] = $value; return $array; } } if ( ! function_exists('array_sort')) { function array_sort($array, Closure $callback) { return Illuminate\Support\Collection::make($array)->sortBy($callback)->all(); } } if ( ! function_exists('array_where')) { function array_where($array, Closure $callback) { $filtered = array(); foreach ($array as $key => $value) { if (call_user_func($callback, $key, $value)) $filtered[$key] = $value; } return $filtered; } } if ( ! function_exists('asset')) { function asset($path, $secure = null) { return app('url')->asset($path, $secure); } } if ( ! function_exists('base_path')) { function base_path($path = '') { return app()->make('path.base').($path ? '/'.$path : $path); } } if ( ! function_exists('camel_case')) { function camel_case($value) { return Illuminate\Support\Str::camel($value); } } if ( ! function_exists('class_basename')) { function class_basename($class) { $class = is_object($class) ? get_class($class) : $class; return basename(str_replace('\\', '/', $class)); } } if ( ! function_exists('csrf_token')) { function csrf_token() { $session = app('session'); if (isset($session)) { return $session->getToken(); } else { throw new RuntimeException("Application session store not set."); } } } if ( ! function_exists('data_get')) { function data_get($target, $key, $default = null) { if (is_array($target)) { return array_get($target, $key, $default); } elseif (is_object($target)) { return object_get($target, $key, $default); } else { throw new \InvalidArgumentException("Array or object must be passed to data_get."); } } } if ( ! function_exists('dd')) { function dd() { array_map(function($x) { var_dump($x); }, func_get_args()); die; } } if ( ! function_exists('e')) { function e($value) { return htmlentities($value, ENT_QUOTES, 'UTF-8', false); } } if ( ! function_exists('ends_with')) { function ends_with($haystack, $needle) { return Illuminate\Support\Str::endsWith($haystack, $needle); } } if ( ! function_exists('head')) { function head($array) { return reset($array); } } if ( ! function_exists('link_to')) { function link_to($url, $title = null, $attributes = array(), $secure = null) { return app('html')->link($url, $title, $attributes, $secure); } } if ( ! function_exists('last')) { function last($array) { return end($array); } } if ( ! function_exists('link_to_asset')) { function link_to_asset($url, $title = null, $attributes = array(), $secure = null) { return app('html')->linkAsset($url, $title, $attributes, $secure); } } if ( ! function_exists('link_to_route')) { function link_to_route($name, $title = null, $parameters = array(), $attributes = array()) { return app('html')->linkRoute($name, $title, $parameters, $attributes); } } if ( ! function_exists('link_to_action')) { function link_to_action($action, $title = null, $parameters = array(), $attributes = array()) { return app('html')->linkAction($action, $title, $parameters, $attributes); } } if ( ! function_exists('object_get')) { function object_get($object, $key, $default = null) { if (is_null($key) || trim($key) == '') return $object; foreach (explode('.', $key) as $segment) { if ( ! is_object($object) || ! isset($object->{$segment})) { return value($default); } $object = $object->{$segment}; } return $object; } } if ( ! function_exists('preg_replace_sub')) { function preg_replace_sub($pattern, &$replacements, $subject) { return preg_replace_callback($pattern, function($match) use (&$replacements) { return array_shift($replacements); }, $subject); } } if ( ! function_exists('public_path')) { function public_path($path = '') { return app()->make('path.public').($path ? '/'.$path : $path); } } if ( ! function_exists('route')) { function route($route, $parameters = array()) { return app('url')->route($route, $parameters); } } if ( ! function_exists('secure_asset')) { function secure_asset($path) { return asset($path, true); } } if ( ! function_exists('secure_url')) { function secure_url($path, $parameters = array()) { return url($path, $parameters, true); } } if ( ! function_exists('snake_case')) { function snake_case($value, $delimiter = '_') { return Illuminate\Support\Str::snake($value, $delimiter); } } if ( ! function_exists('starts_with')) { function starts_with($haystack, $needle) { return Illuminate\Support\Str::startsWith($haystack, $needle); } } if ( ! function_exists('storage_path')) { function storage_path($path = '') { return app('path.storage').($path ? '/'.$path : $path); } } if ( ! function_exists('str_contains')) { function str_contains($haystack, $needle) { return Illuminate\Support\Str::contains($haystack, $needle); } } if ( ! function_exists('str_finish')) { function str_finish($value, $cap) { return Illuminate\Support\Str::finish($value, $cap); } } if ( ! function_exists('str_is')) { function str_is($pattern, $value) { return Illuminate\Support\Str::is($pattern, $value); } } if ( ! function_exists('str_limit')) { function str_limit($value, $limit = 100, $end = '...') { return Illuminate\Support\Str::limit($value, $limit, $end); } } if ( ! function_exists('str_plural')) { function str_plural($value, $count = 2) { return Illuminate\Support\Str::plural($value, $count); } } if ( ! function_exists('str_random')) { function str_random($length = 16) { return Illuminate\Support\Str::random($length); } } if ( ! function_exists('str_replace_array')) { function str_replace_array($search, array $replace, $subject) { foreach ($replace as $value) { $subject = preg_replace('/'.$search.'/', $value, $subject, 1); } return $subject; } } if ( ! function_exists('str_singular')) { function str_singular($value) { return Illuminate\Support\Str::singular($value); } } if ( ! function_exists('studly_case')) { function studly_case($value) { return Illuminate\Support\Str::studly($value); } } if ( ! function_exists('trans')) { function trans($id, $parameters = array(), $domain = 'messages', $locale = null) { return app('translator')->trans($id, $parameters, $domain, $locale); } } if ( ! function_exists('trans_choice')) { function trans_choice($id, $number, array $parameters = array(), $domain = 'messages', $locale = null) { return app('translator')->transChoice($id, $number, $parameters, $domain, $locale); } } if ( ! function_exists('url')) { function url($path = null, $parameters = array(), $secure = null) { return app('url')->to($path, $parameters, $secure); } } if ( ! function_exists('value')) { function value($value) { return $value instanceof Closure ? $value() : $value; } } if ( ! function_exists('with')) { function with($object) { return $object; } }
