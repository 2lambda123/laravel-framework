<?php

namespace Illuminate\Support\Facades;

/**
 * @method static bool accepts(string|array $contentTypes)
 * @method static bool acceptsAnyContentType()
 * @method static bool acceptsHtml()
 * @method static bool acceptsJson()
 * @method static bool ajax()
 * @method static array all(array|mixed|null $keys = null)
 * @method static array allFiles()
 * @method static bool anyFilled(string|array $keys)
 * @method static string|null bearerToken()
 * @method static bool boolean(string|null $key = null, bool $default = false)
 * @method static static capture()
 * @method static \Illuminate\Support\Collection collect(array|string|null $key = null)
 * @method static string|array|null cookie(string|null $key = null, string|array|null $default = null)
 * @method static create(string $uri, string $method, array $parameters, array $cookies, array $files, array $server, string|resource|null $content)
 * @method static static createFrom(\Illuminate\Http\Request $from, \Illuminate\Http\Request|null $to = null)
 * @method static static createFromBase(\Symfony\Component\HttpFoundation\Request $request)
 * @method static createFromGlobals()
 * @method static \Illuminate\Support\Carbon|null date(string $key, string|null $format = null, string|null $tz = null)
 * @method static void dd(mixed $keys)
 * @method static string decodedPath()
 * @method static \Illuminate\Http\Request dump(mixed $keys = [])
 * @method static static duplicate()
 * @method static enableHttpMethodParameterOverride()
 * @method static array except(array|mixed $keys)
 * @method static bool exists(string|array $key)
 * @method static bool expectsJson()
 * @method static \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null file(string|null $key = null, mixed $default = null)
 * @method static bool filled(string|array $key)
 * @method static string fingerprint()
 * @method static void flash()
 * @method static void flashExcept(array|mixed $keys)
 * @method static void flashOnly(array|mixed $keys)
 * @method static void flush()
 * @method static void flushMacros()
 * @method static string format(string $default = 'html')
 * @method static string fullUrl()
 * @method static bool fullUrlIs(mixed ...$patterns)
 * @method static string fullUrlWithQuery(array $query)
 * @method static string fullUrlWithoutQuery(array|string $keys)
 * @method static mixed get(string $key, mixed $default = null)
 * @method static getAcceptableContentTypes()
 * @method static string getBasePath()
 * @method static string getBaseUrl()
 * @method static getCharsets()
 * @method static getClientIp()
 * @method static getClientIps()
 * @method static string|resource getContent(bool $asResource)
 * @method static getContentType()
 * @method static getDefaultLocale()
 * @method static getETags()
 * @method static getEncodings()
 * @method static getFormat()
 * @method static getHost()
 * @method static getHttpHost()
 * @method static getHttpMethodParameterOverride()
 * @method static getLanguages()
 * @method static getLocale()
 * @method static getMethod()
 * @method static getMimeType()
 * @method static getMimeTypes()
 * @method static getPassword()
 * @method static string The raw path (i.e. not urldecoded) getPathInfo()
 * @method static int|string|null Can be a string if fetched from the server bag getPort()
 * @method static getPreferredFormat()
 * @method static getPreferredLanguage(string[] $locales)
 * @method static getProtocolVersion()
 * @method static getQueryString()
 * @method static getRealMethod()
 * @method static getRelativeUriForPath()
 * @method static getRequestFormat()
 * @method static string getRequestUri()
 * @method static \Closure getRouteResolver()
 * @method static getScheme()
 * @method static getSchemeAndHttpHost()
 * @method static getScriptName()
 * @method static getSession()
 * @method static int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies getTrustedHeaderSet()
 * @method static getTrustedHosts()
 * @method static getTrustedProxies()
 * @method static getUri()
 * @method static getUriForPath(string $path)
 * @method static getUser()
 * @method static string|null getUserInfo()
 * @method static \Closure getUserResolver()
 * @method static bool has(string|array $key)
 * @method static bool hasAny(string|array $keys)
 * @method static bool hasCookie(string $key)
 * @method static bool hasFile(string $key)
 * @method static bool hasHeader(string $key)
 * @method static bool hasMacro(string $name)
 * @method static hasPreviousSession()
 * @method static hasSession()
 * @method static string|array|null header(string|null $key = null, string|array|null $default = null)
 * @method static string host()
 * @method static string httpHost()
 * @method static initialize(array $query, array $request, array $attributes, array $cookies, array $files, array $server, string|resource|null $content)
 * @method static mixed input(string|null $key = null, mixed $default = null)
 * @method static \Illuminate\Http\Request instance()
 * @method static string|null ip()
 * @method static array ips()
 * @method static bool is(mixed ...$patterns)
 * @method static isFromTrustedProxy()
 * @method static bool isJson()
 * @method static isMethod(string $method)
 * @method static isMethodCacheable()
 * @method static isMethodIdempotent()
 * @method static isMethodSafe()
 * @method static isNoCache()
 * @method static bool isNotFilled(string|array $key)
 * @method static isSecure()
 * @method static isXmlHttpRequest()
 * @method static \Symfony\Component\HttpFoundation\ParameterBag|mixed json(string|null $key = null, mixed $default = null)
 * @method static array keys()
 * @method static void macro(string $name, object|callable $macro)
 * @method static bool matchesType(string $actual, string $type)
 * @method static \Illuminate\Http\Request merge(array $input)
 * @method static \Illuminate\Http\Request mergeIfMissing(array $input)
 * @method static string method()
 * @method static bool missing(string|array $key)
 * @method static void mixin(object $mixin, bool $replace = true)
 * @method static normalizeQueryString()
 * @method static bool offsetExists(string $offset)
 * @method static mixed offsetGet(string $offset)
 * @method static void offsetSet(string $offset, mixed $value)
 * @method static void offsetUnset(string $offset)
 * @method static string|array|null old(string|null $key = null, \Illuminate\Database\Eloquent\Model|string|array|null $default = null)
 * @method static array only(array|mixed $keys)
 * @method static overrideGlobals()
 * @method static string path()
 * @method static bool pjax()
 * @method static string|array|null post(string|null $key = null, string|array|null $default = null)
 * @method static preferSafeContent()
 * @method static string|null prefers(string|array $contentTypes)
 * @method static bool prefetch()
 * @method static string|array|null query(string|null $key = null, string|array|null $default = null)
 * @method static \Illuminate\Http\Request replace(array $input)
 * @method static string root()
 * @method static \Illuminate\Routing\Route|object|string|null route(string|null $param = null, mixed $default = null)
 * @method static bool routeIs(mixed ...$patterns)
 * @method static string schemeAndHttpHost()
 * @method static bool secure()
 * @method static string|null segment(int $index, string|null $default = null)
 * @method static array segments()
 * @method static string|array|null server(string|null $key = null, string|array|null $default = null)
 * @method static \Illuminate\Contracts\Session\Session session()
 * @method static setDefaultLocale()
 * @method static setFactory()
 * @method static setFormat(string|array $mimeTypes)
 * @method static \Illuminate\Http\Request setJson(\Symfony\Component\HttpFoundation\ParameterBag $json)
 * @method static void setLaravelSession(\Illuminate\Contracts\Session\Session $session)
 * @method static setLocale()
 * @method static setMethod()
 * @method static setRequestFormat()
 * @method static \Illuminate\Http\Request setRouteResolver(\Closure $callback)
 * @method static setSession()
 * @method static setSessionFactory(\Symfony\Component\HttpFoundation\Session\SessionInterface $factory)
 * @method static setTrustedHosts(array $hostPatterns)
 * @method static setTrustedProxies(array $proxies)
 * @method static \Illuminate\Http\Request setUserResolver(\Closure $callback)
 * @method static \Illuminate\Support\Stringable str(string $key, mixed $default = null)
 * @method static \Illuminate\Support\Stringable string(string $key, mixed $default = null)
 * @method static array toArray()
 * @method static string url()
 * @method static mixed user(string|null $guard = null)
 * @method static string|null userAgent()
 * @method static bool wantsJson()
 * @method static \Illuminate\Http\Request|mixed whenFilled(string $key, callable $callback, callable|null $default = null)
 * @method static \Illuminate\Http\Request|mixed whenHas(string $key, callable $callback, callable|null $default = null)
 *
 * @see \Illuminate\Http\Request
 */
class Request extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return 'request';
    }
}
