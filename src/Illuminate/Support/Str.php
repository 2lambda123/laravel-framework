<?php namespace Illuminate\Support; use Illuminate\Support\Traits\MacroableTrait; class Str { use MacroableTrait; public static function ascii($value) { return \Patchwork\Utf8::toAscii($value); } public static function camel($value) { return lcfirst(static::studly($value)); } public static function contains($haystack, $needles) { foreach ((array) $needles as $needle) { if ($needle != '' && strpos($haystack, $needle) !== false) return true; } return false; } public static function endsWith($haystack, $needles) { foreach ((array) $needles as $needle) { if ($needle == substr($haystack, -strlen($needle))) return true; } return false; } public static function finish($value, $cap) { $quoted = preg_quote($cap, '/'); return preg_replace('/(?:'.$quoted.')+$/', '', $value).$cap; } public static function is($pattern, $value) { if ($pattern == $value) return true; $pattern = preg_quote($pattern, '#'); $pattern = str_replace('\*', '.*', $pattern).'\z'; return (bool) preg_match('#^'.$pattern.'#', $value); } public static function length($value) { return mb_strlen($value); } public static function limit($value, $limit = 100, $end = '...') { if (mb_strlen($value) <= $limit) return $value; return rtrim(mb_substr($value, 0, $limit, 'UTF-8')).$end; } public static function lower($value) { return mb_strtolower($value); } public static function words($value, $words = 100, $end = '...') { preg_match('/^\s*+(?:\S++\s*+){1,'.$words.'}/u', $value, $matches); if ( ! isset($matches[0])) return $value; if (strlen($value) == strlen($matches[0])) return $value; return rtrim($matches[0]).$end; } public static function parseCallback($callback, $default) { return static::contains($callback, '@') ? explode('@', $callback, 2) : array($callback, $default); } public static function plural($value, $count = 2) { return Pluralizer::plural($value, $count); } public static function random($length = 16) { if (function_exists('openssl_random_pseudo_bytes')) { $bytes = openssl_random_pseudo_bytes($length build composer.json composer.lock CONTRIBUTING.md LICENSE.txt phpmin.sh phpunit.php phpunit.xml readme.md src tests 2); if ($bytes === false) { throw new \RuntimeException('Unable to generate random string.'); } return substr(str_replace(array('/', '+', '='), '', base64_encode($bytes)), 0, $length); } return static::quickRandom($length); } public static function quickRandom($length = 16) { $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; return substr(str_shuffle(str_repeat($pool, 5)), 0, $length); } public static function upper($value) { return mb_strtoupper($value); } public static function title($value) { return mb_convert_case($value, MB_CASE_TITLE, 'UTF-8'); } public static function singular($value) { return Pluralizer::singular($value); } public static function slug($title, $separator = '-') { $title = static::ascii($title); $flip = $separator == '-' ? '_' : '-'; $title = preg_replace('!['.preg_quote($flip).']+!u', $separator, $title); $title = preg_replace('![^'.preg_quote($separator).'\pL\pN\s]+!u', '', mb_strtolower($title)); $title = preg_replace('!['.preg_quote($separator).'\s]+!u', $separator, $title); return trim($title, $separator); } public static function snake($value, $delimiter = '_') { $replace = '$1'.$delimiter.'$2'; return ctype_lower($value) ? $value : strtolower(preg_replace('/(.)([A-Z])/', $replace, $value)); } public static function startsWith($haystack, $needles) { foreach ((array) $needles as $needle) { if ($needle != '' && strpos($haystack, $needle) === 0) return true; } return false; } public static function studly($value) { $value = ucwords(str_replace(array('-', '_'), ' ', $value)); return str_replace(' ', '', $value); } }
