<?php namespace Illuminate\Support; use ReflectionClass; abstract class ServiceProvider { protected $app; protected $defer = false; public function __construct($app) { $this->app = $app; } public function boot() {} abstract public function register(); public function package($package, $namespace = null, $path = null) { $namespace = $this->getPackageNamespace($package, $namespace); $path = $path ?: $this->guessPackagePath(); $config = $path.'/config'; if ($this->app['files']->isDirectory($config)) { $this->app['config']->package($package, $config, $namespace); } $lang = $path.'/lang'; if ($this->app['files']->isDirectory($lang)) { $this->app['translator']->addNamespace($namespace, $lang); } $appView = $this->getAppViewPath($package); if ($this->app['files']->isDirectory($appView)) { $this->app['view']->addNamespace($namespace, $appView); } $view = $path.'/views'; if ($this->app['files']->isDirectory($view)) { $this->app['view']->addNamespace($namespace, $view); } } public function guessPackagePath() { $path = with(new ReflectionClass($this))->getFileName(); return realpath(dirname($path).'/../../'); } protected function getPackageNamespace($package, $namespace) { if (is_null($namespace)) { list($vendor, $namespace) = explode('/', $package); } return $namespace; } public function commands($commands) { $commands = is_array($commands) ? $commands : func_get_args(); $events = $this->app['events']; $events->listen('artisan.start', function($artisan) use ($commands) { $artisan->resolveCommands($commands); }); } protected function getAppViewPath($package) { return $this->app['path']."/views/packages/{$package}"; } public function provides() { return array(); } public function when() { return array(); } public function isDeferred() { return $this->defer; } }
