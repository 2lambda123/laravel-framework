<?php namespace Illuminate\Remote; use Closure; use Illuminate\Filesystem\Filesystem; use Symfony\Component\Console\Output\NullOutput; use Symfony\Component\Console\Output\OutputInterface; class Connection implements ConnectionInterface { protected $gateway; protected $name; protected $host; protected $username; protected $auth; protected $tasks = array(); protected $output; public function __construct($name, $host, $username, array $auth, GatewayInterface $gateway = null) { $this->name = $name; $this->host = $host; $this->username = $username; $this->gateway = $gateway ?: new SecLibGateway($host, $auth, new Filesystem); } public function define($task, $commands) { $this->tasks[$task] = $commands; } public function task($task, Closure $callback = null) { if (isset($this->tasks[$task])) { return $this->run($this->tasks[$task], $callback); } } public function run($commands, Closure $callback = null) { $gateway = $this->getGateway(); $callback = $this->getCallback($callback); $gateway->run($this->formatCommands($commands)); while (true) { if (is_null($line = $gateway->nextLine())) break; call_user_func($callback, $line, $this); } } public function get($remote, $local) { $this->getGateway()->get($remote, $local); } public function getString($remote) { return $this->getGateway()->getString($remote); } public function put($local, $remote) { $this->getGateway()->put($local, $remote); } public function putString($remote, $contents) { $this->getGateway()->putString($remote, $contents); } public function display($line) { $server = $this->username.'@'.$this->host; $lead = '<comment>['.$server.']</comment> <info>('.$this->name.')</info>'; $this->getOutput()->writeln($lead.' '.$line); } protected function formatCommands($commands) { return is_array($commands) ? implode(' && ', $commands) : $commands; } protected function getCallback($callback) { if ( ! is_null($callback)) return $callback; return function($line) { $this->display($line); }; } public function status() { return $this->gateway->status(); } public function getGateway() { if ( ! $this->gateway->connected()) { if ( ! $this->gateway->connect($this->username)) { throw new \RuntimeException("Unable to connect to remote server."); } } return $this->gateway; } public function getOutput() { if (is_null($this->output)) $this->output = new NullOutput; return $this->output; } public function setOutput(OutputInterface $output) { $this->output = $output; } }
