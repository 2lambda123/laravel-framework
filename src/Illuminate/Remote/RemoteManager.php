<?php namespace Illuminate\Remote; use Symfony\Component\Console\Output\NullOutput; use Symfony\Component\Console\Output\ConsoleOutput; class RemoteManager { protected $app; public function __construct($app) { $this->app = $app; } public function into($name) { if (is_string($name) || is_array($name)) { return $this->connection($name); } else { return $this->connection(func_get_args()); } } public function connection($name = null) { if (is_array($name)) return $this->multiple($name); return $this->resolve($name ?: $this->getDefaultConnection()); } public function group($name) { return $this->connection($this->app['config']['remote.groups.'.$name]); } public function multiple(array $names) { return new MultiConnection(array_map(array($this, 'resolve'), $names)); } public function resolve($name) { return $this->makeConnection($name, $this->getConfig($name)); } protected function makeConnection($name, array $config) { $this->setOutput($connection = new Connection( $name, $config['host'], $config['username'], $this->getAuth($config) )); return $connection; } protected function setOutput(Connection $connection) { $output = php_sapi_name() == 'cli' ? new ConsoleOutput : new NullOutput; $connection->setOutput($output); } protected function getAuth(array $config) { if (isset($config['key']) && trim($config['key']) != '') { return array('key' => $config['key'], 'keyphrase' => $config['keyphrase']); } elseif (isset($config['keytext']) && trim($config['keytext']) != '') { return array('keytext' => $config['keytext']); } elseif (isset($config['password'])) { return array('password' => $config['password']); } throw new \InvalidArgumentException('Password / key is required.'); } protected function getConfig($name) { $config = $this->app['config']['remote.connections.'.$name]; if ( ! is_null($config)) return $config; throw new \InvalidArgumentException("Remote connection [$name] not defined."); } public function getDefaultConnection() { return $this->app['config']['remote.default']; } public function setDefaultConnection($name) { $this->app['config']['remote.default'] = $name; } public function __call($method, $parameters) { return call_user_func_array(array($this->connection(), $method), $parameters); } }
