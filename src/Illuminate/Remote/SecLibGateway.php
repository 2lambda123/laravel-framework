<?php namespace Illuminate\Remote; use Net_SFTP, Crypt_RSA; use Illuminate\Filesystem\Filesystem; class SecLibGateway implements GatewayInterface { protected $host; protected $port = 22; protected $auth; protected $files; protected $connection; public function __construct($host, array $auth, Filesystem $files) { $this->auth = $auth; $this->files = $files; $this->setHostAndPort($host); } protected function setHostAndPort($host) { if ( ! str_contains($host, ':')) { $this->host = $host; } else { list($this->host, $this->port) = explode(':', $host); $this->port = (int) $this->port; } } public function connect($username) { return $this->getConnection()->login($username, $this->getAuthForLogin()); } public function connected() { return $this->getConnection()->isConnected(); } public function run($command) { $this->getConnection()->exec($command, false); } public function get($remote, $local) { $this->getConnection()->get($remote, $local); } public function getString($remote) { return $this->getConnection()->get($remote); } public function put($local, $remote) { $this->getConnection()->put($remote, $local, NET_SFTP_LOCAL_FILE); } public function putString($remote, $contents) { $this->getConnection()->put($remote, $contents); } public function nextLine() { $value = $this->getConnection()->_get_channel_packet(NET_SSH2_CHANNEL_EXEC); return $value === true ? null : $value; } protected function getAuthForLogin() { if ($this->hasRsaKey()) { return $this->loadRsaKey($this->auth); } elseif (isset($this->auth['password'])) { return $this->auth['password']; } throw new \InvalidArgumentException('Password / key is required.'); } protected function hasRsaKey() { $hasKey = (isset($this->auth['key']) && trim($this->auth['key']) != ''); return $hasKey || (isset($this->auth['keytext']) && trim($this->auth['keytext']) != ''); } protected function loadRsaKey(array $auth) { with($key = $this->getKey($auth))->loadKey($this->readRsaKey($auth)); return $key; } protected function readRsaKey(array $auth) { if (isset($auth['key'])) return $this->files->get($auth['key']); return $auth['keytext']; } protected function getKey(array $auth) { with($key = $this->getNewKey())->setPassword(array_get($auth, 'keyphrase')); return $key; } public function getNewKey() { return new Crypt_RSA; } public function status() { return $this->getConnection()->getExitStatus(); } public function getHost() { return $this->host; } public function getPort() { return $this->port; } public function getConnection() { if ($this->connection) return $this->connection; return $this->connection = new Net_SFTP($this->host, $this->port); } }
