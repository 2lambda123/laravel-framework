<?php namespace Illuminate\View; use Illuminate\Support\ViewErrorBag; use Illuminate\View\Engines\PhpEngine; use Illuminate\Support\ServiceProvider; use Illuminate\View\Engines\CompilerEngine; use Illuminate\View\Engines\EngineResolver; use Illuminate\View\Compilers\BladeCompiler; class ViewServiceProvider extends ServiceProvider { public function register() { $this->registerEngineResolver(); $this->registerViewFinder(); $this->registerFactory(); $this->registerSessionBinder(); } public function registerEngineResolver() { $this->app->bindShared('view.engine.resolver', function($app) { $resolver = new EngineResolver; foreach (array('php', 'blade') as $engine) { $this->{'register'.ucfirst($engine).'Engine'}($resolver); } return $resolver; }); } public function registerPhpEngine($resolver) { $resolver->register('php', function() { return new PhpEngine; }); } public function registerBladeEngine($resolver) { $app = $this->app; $app->bindShared('blade.compiler', function($app) { $cache = $app['path.storage'].'/views'; return new BladeCompiler($app['files'], $cache); }); $resolver->register('blade', function() use ($app) { return new CompilerEngine($app['blade.compiler'], $app['files']); }); } public function registerViewFinder() { $this->app->bindShared('view.finder', function($app) { $paths = $app['config']['view.paths']; return new FileViewFinder($app['files'], $paths); }); } public function registerFactory() { $this->app->bindShared('view', function($app) { $resolver = $app['view.engine.resolver']; $finder = $app['view.finder']; $env = new Factory($resolver, $finder, $app['events']); $env->setContainer($app); $env->share('app', $app); return $env; }); } protected function registerSessionBinder() { list($app, $me) = array($this->app, $this); $app->booted(function() use ($app, $me) { if ($me->sessionHasErrors($app)) { $errors = $app['session.store']->get('errors'); $app['view']->share('errors', $errors); } else { $app['view']->share('errors', new ViewErrorBag); } }); } public function sessionHasErrors($app) { $config = $app['config']['session']; if (isset($app['session.store']) && ! is_null($config['driver'])) { return $app['session.store']->has('errors'); } } }
