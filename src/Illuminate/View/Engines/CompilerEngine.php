<?php namespace Illuminate\View\Engines; use Illuminate\View\Compilers\CompilerInterface; class CompilerEngine extends PhpEngine { protected $compiler; protected $lastCompiled = array(); public function __construct(CompilerInterface $compiler) { $this->compiler = $compiler; } public function get($path, array $data = array()) { $this->lastCompiled[] = $path; if ($this->compiler->isExpired($path)) { $this->compiler->compile($path); } $compiled = $this->compiler->getCompiledPath($path); $results = $this->evaluatePath($compiled, $data); array_pop($this->lastCompiled); return $results; } protected function handleViewException($e) { $e = new \ErrorException($this->getMessage($e), 0, 1, $e->getFile(), $e->getLine(), $e); ob_get_clean(); throw $e; } protected function getMessage($e) { return $e->getMessage().' (View: '.realpath(last($this->lastCompiled)).')'; } public function getCompiler() { return $this->compiler; } }
