<?php namespace Illuminate\Routing; use Closure; use Illuminate\Http\Request; use Illuminate\Container\Container; class ControllerDispatcher { protected $filterer; protected $container; public function __construct(RouteFiltererInterface $filterer, Container $container = null) { $this->filterer = $filterer; $this->container = $container; } public function dispatch(Route $route, Request $request, $controller, $method) { $instance = $this->makeController($controller); $this->assignAfter($instance, $route, $request, $method); $response = $this->before($instance, $route, $request, $method); if (is_null($response)) { $response = $this->call($instance, $route, $method); } return $response; } protected function makeController($controller) { Controller::setFilterer($this->filterer); return $this->container->make($controller); } protected function call($instance, $route, $method) { $parameters = $route->parametersWithoutNulls(); return $instance->callAction($method, $parameters); } protected function before($instance, $route, $request, $method) { foreach ($instance->getBeforeFilters() as $filter) { if ($this->filterApplies($filter, $request, $method)) { $response = $this->callFilter($filter, $route, $request); if ( ! is_null($response)) return $response; } } } protected function assignAfter($instance, $route, $request, $method) { foreach ($instance->getAfterFilters() as $filter) { if ($this->filterApplies($filter, $request, $method)) { $route->after($this->getAssignableAfter($filter)); } } } protected function getAssignableAfter($filter) { return $filter['original'] instanceof Closure ? $filter['filter'] : $filter['original']; } protected function filterApplies($filter, $request, $method) { foreach (array('Only', 'Except', 'On') as $type) { if ($this->{"filterFails{$type}"}($filter, $request, $method)) { return false; } } return true; } protected function filterFailsOnly($filter, $request, $method) { if ( ! isset($filter['options']['only'])) return false; return ! in_array($method, (array) $filter['options']['only']); } protected function filterFailsExcept($filter, $request, $method) { if ( ! isset($filter['options']['except'])) return false; return in_array($method, (array) $filter['options']['except']); } protected function filterFailsOn($filter, $request, $method) { $on = array_get($filter, 'options.on', null); if (is_null($on)) return false; if (is_string($on)) $on = explode('|', $on); return ! in_array(strtolower($request->getMethod()), $on); } protected function callFilter($filter, $route, $request) { extract($filter); return $this->filterer->callRouteFilter($filter, $parameters, $route, $request); } }
