<?php namespace Illuminate\Routing; use Illuminate\Http\Request; use InvalidArgumentException; class UrlGenerator { protected $routes; protected $request; protected $dontEncode = array( '%2F' => '/', '%40' => '@', '%3A' => ':', '%3B' => ';', '%2C' => ',', '%3D' => '=', '%2B' => '+', '%21' => '!', '%2A' => '*', '%7C' => '|', ); public function __construct(RouteCollection $routes, Request $request) { $this->routes = $routes; $this->setRequest($request); } public function full() { return $this->request->fullUrl(); } public function current() { return $this->to($this->request->getPathInfo()); } public function previous() { return $this->to($this->request->headers->get('referer')); } public function to($path, $extra = array(), $secure = null) { if ($this->isValidUrl($path)) return $path; $scheme = $this->getScheme($secure); $tail = implode('/', array_map( 'rawurlencode', (array) $extra) ); $root = $this->getRootUrl($scheme); return $this->trimUrl($root, $path, $tail); } public function secure($path, $parameters = array()) { return $this->to($path, $parameters, true); } public function asset($path, $secure = null) { if ($this->isValidUrl($path)) return $path; $root = $this->getRootUrl($this->getScheme($secure)); return $this->removeIndex($root).'/'.trim($path, '/'); } protected function removeIndex($root) { $i = 'index.php'; return str_contains($root, $i) ? str_replace('/'.$i, '', $root) : $root; } public function secureAsset($path) { return $this->asset($path, true); } protected function getScheme($secure) { if (is_null($secure)) { return $this->request->getScheme().'://'; } else { return $secure ? 'https://' : 'http://'; } } public function route($name, $parameters = array(), $absolute = true, $route = null) { $route = $route ?: $this->routes->getByName($name); $parameters = (array) $parameters; if ( ! is_null($route)) { return $this->toRoute($route, $parameters, $absolute); } else { throw new InvalidArgumentException("Route [{$name}] not defined."); } } protected function toRoute($route, array $parameters, $absolute) { $domain = $this->getRouteDomain($route, $parameters); $uri = strtr(rawurlencode($this->trimUrl( $root = $this->replaceRoot($route, $domain, $parameters), $this->replaceRouteParameters($route->uri(), $parameters) )), $this->dontEncode).$this->getRouteQueryString($parameters); return $absolute ? $uri : '/'.ltrim(str_replace($root, '', $uri), '/'); } protected function replaceRoot($route, $domain, &$parameters) { return $this->replaceRouteParameters($this->getRouteRoot($route, $domain), $parameters); } protected function replaceRouteParameters($path, array &$parameters) { if (count($parameters)) { $path = preg_replace_sub( '/\{.*?\}/', $parameters, $this->replaceNamedParameters($path, $parameters) ); } return trim(preg_replace('/\{.*?\?\}/', '', $path), '/'); } protected function replaceNamedParameters($path, &$parameters) { return preg_replace_callback('/\{(.*?)\??\}/', function($m) use (&$parameters) { return isset($parameters[$m[1]]) ? array_pull($parameters, $m[1]) : $m[0]; }, $path); } protected function getRouteQueryString(array $parameters) { if (count($parameters) == 0) return ''; $query = http_build_query( $keyed = $this->getStringParameters($parameters) ); if (count($keyed) < count($parameters)) { $query .= '&'.implode( '&', $this->getNumericParameters($parameters) ); } return '?'.trim($query, '&'); } protected function getStringParameters(array $parameters) { return array_where($parameters, function($k, $v) { return is_string($k); }); } protected function getNumericParameters(array $parameters) { return array_where($parameters, function($k, $v) { return is_numeric($k); }); } protected function getRouteDomain($route, &$parameters) { return $route->domain() ? $this->formatDomain($route, $parameters) : null; } protected function formatDomain($route, &$parameters) { return $this->addPortToDomain($this->getDomainAndScheme($route)); } protected function getDomainAndScheme($route) { return $this->getRouteScheme($route).$route->domain(); } protected function addPortToDomain($domain) { if (in_array($this->request->getPort(), array('80', '443'))) { return $domain; } else { return $domain .= ':'.$this->request->getPort(); } } protected function getRouteRoot($route, $domain) { return $this->getRootUrl($this->getRouteScheme($route), $domain); } protected function getRouteScheme($route) { if ($route->httpOnly()) { return $this->getScheme(false); } elseif ($route->httpsOnly()) { return $this->getScheme(true); } else { return $this->getScheme(null); } } public function action($action, $parameters = array(), $absolute = true) { return $this->route($action, $parameters, $absolute, $this->routes->getByAction($action)); } protected function getRootUrl($scheme, $root = null) { $root = $root ?: $this->request->root(); $start = starts_with($root, 'http://') ? 'http://' : 'https://'; return preg_replace('~'.$start.'~', $scheme, $root, 1); } public function isValidUrl($path) { if (starts_with($path, array('#', '//', 'mailto:', 'tel:'))) return true; return filter_var($path, FILTER_VALIDATE_URL) !== false; } protected function trimUrl($root, $path, $tail = '') { return trim($root.'/'.trim($path.'/'.$tail, '/'), '/'); } public function getRequest() { return $this->request; } public function setRequest(Request $request) { $this->request = $request; } }
