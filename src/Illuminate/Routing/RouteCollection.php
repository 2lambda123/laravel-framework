<?php namespace Illuminate\Routing; use Countable; use ArrayIterator; use IteratorAggregate; use Illuminate\Http\Request; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; class RouteCollection implements Countable, IteratorAggregate { protected $routes = array(); protected $allRoutes = array(); protected $nameList = array(); protected $actionList = array(); public function add(Route $route) { $this->addToCollections($route); $this->addLookups($route); return $route; } protected function addToCollections($route) { foreach ($route->methods() as $method) { $this->routes[$method][$route->domain().$route->getUri()] = $route; } $this->allRoutes[$method.$route->domain().$route->getUri()] = $route; } protected function addLookups($route) { $action = $route->getAction(); if (isset($action['as'])) { $this->nameList[$action['as']] = $route; } if (isset($action['controller'])) { $this->addToActionList($action, $route); } } protected function addToActionList($action, $route) { if ( ! isset($this->actionList[$action['controller']])) { $this->actionList[$action['controller']] = $route; } } public function match(Request $request) { $routes = $this->get($request->getMethod()); $route = $this->check($routes, $request); if ( ! is_null($route)) { return $route->bind($request); } $this->checkForAlternateVerbs($request); throw new NotFoundHttpException; } protected function checkForAlternateVerbs($request) { $others = array_diff(Router::$verbs, array($request->getMethod())); foreach ($others as $other) { if ( ! is_null($this->check($this->get($other), $request))) { $this->methodNotAllowed($other); } } } protected function methodNotAllowed($other) { throw new MethodNotAllowedHttpException(array($other)); } protected function check(array $routes, $request) { return array_first($routes, function($key, $value) use ($request) { return $value->matches($request); }); } protected function get($method = null) { if (is_null($method)) return $this->getRoutes(); return array_get($this->routes, $method, array()); } public function hasNamedRoute($name) { return ! is_null($this->getByName($name)); } public function getByName($name) { return isset($this->nameList[$name]) ? $this->nameList[$name] : null; } public function getByAction($action) { return isset($this->actionList[$action]) ? $this->actionList[$action] : null; } public function getRoutes() { return array_values($this->allRoutes); } public function getIterator() { return new ArrayIterator($this->getRoutes()); } public function count() { return count($this->getRoutes()); } }
