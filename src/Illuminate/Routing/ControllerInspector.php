<?php namespace Illuminate\Routing; use ReflectionClass, ReflectionMethod; class ControllerInspector { protected $verbs = array( 'any', 'get', 'post', 'put', 'patch', 'delete', 'head', 'options' ); public function getRoutable($controller, $prefix) { $routable = array(); $reflection = new ReflectionClass($controller); foreach ($reflection->getMethods() as $method) { if ($this->isRoutable($method, $reflection->name)) { $data = $this->getMethodData($method, $prefix); if ($data['plain'] == $prefix.'/index') { $routable[$method->name][] = $data; $routable[$method->name][] = $this->getIndexData($data, $prefix); } else { $routable[$method->name][] = $data; } } } return $routable; } public function isRoutable(ReflectionMethod $method, $controller) { if ($method->class == 'Illuminate\Routing\Controller') return false; return $method->isPublic() && starts_with($method->name, $this->verbs); } public function getMethodData(ReflectionMethod $method, $prefix) { $verb = $this->getVerb($name = $method->name); $uri = $this->addUriWildcards($plain = $this->getPlainUri($name, $prefix)); return compact('verb', 'plain', 'uri'); } protected function getIndexData($data, $prefix) { return array('verb' => $data['verb'], 'plain' => $prefix, 'uri' => $prefix); } public function getVerb($name) { return head(explode('_', snake_case($name))); } public function getPlainUri($name, $prefix) { return $prefix.'/'.implode('-', array_slice(explode('_', snake_case($name)), 1)); } public function addUriWildcards($uri) { return $uri.'/{one?}/{two?}/{three?}/{four?}/{five?}'; } }
