<?php namespace Illuminate\Auth; use Illuminate\Cookie\CookieJar; use Illuminate\Events\Dispatcher; use Symfony\Component\HttpFoundation\Request; use Illuminate\Session\Store as SessionStore; use Symfony\Component\HttpFoundation\Response; class Guard { protected $user; protected $lastAttempted; protected $viaRemember = false; protected $provider; protected $session; protected $cookie; protected $request; protected $events; protected $loggedOut = false; public function __construct(UserProviderInterface $provider, SessionStore $session, Request $request = null) { $this->session = $session; $this->request = $request; $this->provider = $provider; } public function check() { return ! is_null($this->user()); } public function guest() { return ! $this->check(); } public function user() { if ($this->loggedOut) return; if ( ! is_null($this->user)) { return $this->user; } $id = $this->session->get($this->getName()); $user = null; if ( ! is_null($id)) { $user = $this->provider->retrieveByID($id); } $recaller = $this->getRecaller(); if (is_null($user) && ! is_null($recaller)) { $user = $this->getUserByRecaller($recaller); } return $this->user = $user; } protected function getUserByRecaller($id) { $this->viaRemember = ! is_null($user = $this->provider->retrieveByID($id)); return $user; } protected function getRecaller() { return $this->request->cookies->get($this->getRecallerName()); } public function once(array $credentials = array()) { if ($this->validate($credentials)) { $this->setUser($this->lastAttempted); return true; } return false; } public function validate(array $credentials = array()) { return $this->attempt($credentials, false, false); } public function basic($field = 'email', Request $request = null) { if ($this->check()) return; $request = $request ?: $this->getRequest(); if ($this->attemptBasic($request, $field)) return; return $this->getBasicResponse(); } public function onceBasic($field = 'email', Request $request = null) { $request = $request ?: $this->getRequest(); if ( ! $this->once($this->getBasicCredentials($request, $field))) { return $this->getBasicResponse(); } } protected function attemptBasic(Request $request, $field) { if ( ! $request->getUser()) return false; return $this->attempt($this->getBasicCredentials($request, $field)); } protected function getBasicCredentials(Request $request, $field) { return array($field => $request->getUser(), 'password' => $request->getPassword()); } protected function getBasicResponse() { $headers = array('WWW-Authenticate' => 'Basic'); return new Response('Invalid credentials.', 401, $headers); } public function attempt(array $credentials = array(), $remember = false, $login = true) { $this->fireAttemptEvent($credentials, $remember, $login); $this->lastAttempted = $user = $this->provider->retrieveByCredentials($credentials); if ($this->hasValidCredentials($user, $credentials)) { if ($login) $this->login($user, $remember); return true; } return false; } protected function hasValidCredentials($user, $credentials) { return ! is_null($user) && $this->provider->validateCredentials($user, $credentials); } protected function fireAttemptEvent(array $credentials, $remember, $login) { if ($this->events) { $payload = array($credentials, $remember, $login); $this->events->fire('auth.attempt', $payload); } } public function attempting($callback) { if ($this->events) { $this->events->listen('auth.attempt', $callback); } } public function login(UserInterface $user, $remember = false) { $this->updateSession($id = $user->getAuthIdentifier()); if ($remember) { $this->queueRecallerCookie($id); } if (isset($this->events)) { $this->events->fire('auth.login', array($user, $remember)); } $this->setUser($user); } protected function updateSession($id) { $this->session->put($this->getName(), $id); $this->session->migrate(true); } public function loginUsingId($id, $remember = false) { $this->session->put($this->getName(), $id); $this->login($user = $this->provider->retrieveById($id), $remember); return $user; } public function onceUsingId($id) { $this->setUser($this->provider->retrieveById($id)); return $this->user instanceof UserInterface; } protected function queueRecallerCookie($id) { $this->getCookieJar()->queue($this->createRecaller($id)); } protected function createRecaller($id) { return $this->getCookieJar()->forever($this->getRecallerName(), $id); } public function logout() { $user = $this->user(); $this->clearUserDataFromStorage(); if (isset($this->events)) { $this->events->fire('auth.logout', array($user)); } $this->user = null; $this->loggedOut = true; } protected function clearUserDataFromStorage() { $this->session->forget($this->getName()); $recaller = $this->getRecallerName(); $this->getCookieJar()->queue($this->getCookieJar()->forget($recaller)); } public function getCookieJar() { if ( ! isset($this->cookie)) { throw new \RuntimeException("Cookie jar has not been set."); } return $this->cookie; } public function setCookieJar(CookieJar $cookie) { $this->cookie = $cookie; } public function getDispatcher() { return $this->events; } public function setDispatcher(Dispatcher $events) { $this->events = $events; } public function getSession() { return $this->session; } public function getProvider() { return $this->provider; } public function setProvider(UserProviderInterface $provider) { $this->provider = $provider; } public function getUser() { return $this->user; } public function setUser(UserInterface $user) { $this->user = $user; $this->loggedOut = false; } public function getRequest() { return $this->request ?: Request::createFromGlobals(); } public function setRequest(Request $request) { $this->request = $request; return $this; } public function getLastAttempted() { return $this->lastAttempted; } public function getName() { return 'login_'.md5(get_class($this)); } public function getRecallerName() { return 'remember_'.md5(get_class($this)); } public function viaRemember() { return $this->viaRemember; } }
