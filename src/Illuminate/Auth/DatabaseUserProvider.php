<?php namespace Illuminate\Auth; use Illuminate\Database\Connection; use Illuminate\Hashing\HasherInterface; class DatabaseUserProvider implements UserProviderInterface { protected $conn; protected $hasher; protected $table; public function __construct(Connection $conn, HasherInterface $hasher, $table) { $this->conn = $conn; $this->table = $table; $this->hasher = $hasher; } public function retrieveById($identifier) { $user = $this->conn->table($this->table)->find($identifier); if ( ! is_null($user)) { return new GenericUser((array) $user); } } public function retrieveByCredentials(array $credentials) { $query = $this->conn->table($this->table); foreach ($credentials as $key => $value) { if ( ! str_contains($key, 'password')) { $query->where($key, $value); } } $user = $query->first(); if ( ! is_null($user)) { return new GenericUser((array) $user); } } public function validateCredentials(UserInterface $user, array $credentials) { $plain = $credentials['password']; return $this->hasher->check($plain, $user->getAuthPassword()); } }
