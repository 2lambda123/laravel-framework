<?php namespace Illuminate\Auth\Reminders; use Closure; use Illuminate\Mail\Mailer; use Illuminate\Auth\UserProviderInterface; class PasswordBroker { const REMINDER_SENT = 'reminders.sent'; const PASSWORD_RESET = 'reminders.reset'; const INVALID_USER = 'reminders.user'; const INVALID_PASSWORD = 'reminders.password'; const INVALID_TOKEN = 'reminders.token'; protected $reminders; protected $users; protected $mailer; protected $reminderView; protected $passwordValidator; public function __construct(ReminderRepositoryInterface $reminders, UserProviderInterface $users, Mailer $mailer, $reminderView) { $this->users = $users; $this->mailer = $mailer; $this->reminders = $reminders; $this->reminderView = $reminderView; } public function remind(array $credentials, Closure $callback = null) { $user = $this->getUser($credentials); if (is_null($user)) { return self::INVALID_USER; } $token = $this->reminders->create($user); $this->sendReminder($user, $token, $callback); return self::REMINDER_SENT; } public function sendReminder(RemindableInterface $user, $token, Closure $callback = null) { $view = $this->reminderView; return $this->mailer->send($view, compact('token', 'user'), function($m) use ($user, $token, $callback) { $m->to($user->getReminderEmail()); if ( ! is_null($callback)) call_user_func($callback, $m, $user, $token); }); } public function reset(array $credentials, Closure $callback) { $user = $this->validateReset($credentials); if ( ! $user instanceof RemindableInterface) { return $user; } $pass = $credentials['password']; call_user_func($callback, $user, $pass); $this->reminders->delete($credentials['token']); return self::PASSWORD_RESET; } protected function validateReset(array $credentials) { if (is_null($user = $this->getUser($credentials))) { return self::INVALID_USER; } if ( ! $this->validNewPasswords($credentials)) { return self::INVALID_PASSWORD; } if ( ! $this->reminders->exists($user, $credentials['token'])) { return self::INVALID_TOKEN; } return $user; } public function validator(Closure $callback) { $this->passwordValidator = $callback; } protected function validNewPasswords(array $credentials) { list($password, $confirm) = array($credentials['password'], $credentials['password_confirmation']); if (isset($this->passwordValidator)) { return call_user_func($this->passwordValidator, $credentials) && $password == $confirm; } else { return $this->validatePasswordWithDefaults($credentials); } } protected function validatePasswordWithDefaults(array $credentials) { $matches = $credentials['password'] == $credentials['password_confirmation']; return $matches && $credentials['password'] && strlen($credentials['password']) >= 6; } public function getUser(array $credentials) { $credentials = array_except($credentials, array('token')); $user = $this->users->retrieveByCredentials($credentials); if ($user && ! $user instanceof RemindableInterface) { throw new \UnexpectedValueException("User must implement Remindable interface."); } return $user; } protected function getRepository() { return $this->reminders; } }
