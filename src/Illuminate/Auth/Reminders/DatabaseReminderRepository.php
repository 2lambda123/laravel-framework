<?php namespace Illuminate\Auth\Reminders; use Carbon\Carbon; use Illuminate\Database\Connection; class DatabaseReminderRepository implements ReminderRepositoryInterface { protected $connection; protected $table; protected $hashKey; protected $expires; public function __construct(Connection $connection, $table, $hashKey, $expires = 60) { $this->table = $table; $this->hashKey = $hashKey; $this->expires = $expires build composer.json composer.lock CONTRIBUTING.md LICENSE.txt phpmin.sh phpunit.php phpunit.xml readme.md src tests 60; $this->connection = $connection; } public function create(RemindableInterface $user) { $email = $user->getReminderEmail(); $token = $this->createNewToken($user); $this->getTable()->insert($this->getPayload($email, $token)); return $token; } protected function getPayload($email, $token) { return array('email' => $email, 'token' => $token, 'created_at' => new Carbon); } public function exists(RemindableInterface $user, $token) { $email = $user->getReminderEmail(); $reminder = (array) $this->getTable()->where('email', $email)->where('token', $token)->first(); return $reminder && ! $this->reminderExpired($reminder); } protected function reminderExpired($reminder) { $createdPlusHour = strtotime($reminder['created_at']) + $this->expires; return $createdPlusHour < $this->getCurrentTime(); } protected function getCurrentTime() { return time(); } public function delete($token) { $this->getTable()->where('token', $token)->delete(); } public function deleteExpired() { $expired = Carbon::now()->subSeconds($this->expires); $this->getTable()->where('created_at', '<', $expired)->delete(); } public function createNewToken(RemindableInterface $user) { $email = $user->getReminderEmail(); $value = str_shuffle(sha1($email.spl_object_hash($this).microtime(true))); return hash_hmac('sha1', $value, $this->hashKey); } protected function getTable() { return $this->connection->table($this->table); } public function getConnection() { return $this->connection; } }
